@page "/charges"

@inject IChargeService ChargeService
@inject IJSRuntime jsRuntime

<h3>Charge List</h3>

@if (charges == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div>
        <button data-toggle="modal" data-target="#chargeModal" class="btn btn-primary" value="Add Charge" @onclick="(() => InitializeChargeObject())">Add Charge</button>
    </div>



    @foreach (var charge in charges)
    {
        <ChargeItem Charge="@charge" SetChargeItem="@SetChargObject"></ChargeItem>
    }

    <ChargeDetail Charge="@chargeObject" ParentStateChanged="@StateChanged"></ChargeDetail>

    <ConfirmDeleteDialog Charge="@chargeObject" Delete="@DeleteCharge"></ConfirmDeleteDialog>
}


@code {
    private List<Charge> charges = new();
    private Charge chargeObject = new Charge();

    protected override async Task OnInitializedAsync()
    {
        charges = await ChargeService.Get();
    }

    private void InitializeChargeObject()
    {
        chargeObject = new Charge();
    }

    private async void StateChanged()
    {
        charges = await ChargeService.Get();
        StateHasChanged();
    }

    private void SetChargObject(Charge charge)
    {
        chargeObject = charge;
    }

    private async Task DeleteCharge()
    {
        await ChargeService.Delete(chargeObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        StateChanged();
        InitializeChargeObject();
    }
}
