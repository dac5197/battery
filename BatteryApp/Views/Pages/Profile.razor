@page "/profile"

@attribute [Authorize]

@inject AuthenticationStateProvider _authStateProvider
@inject IBreadcrumbManager _breadcrumb
@inject IUserProfileService _userProfileService


<div class="row">
    <div class="col">

    </div>
    <div class="col-lg-6">
        <div class="card border-square shadow-sm px-3 py-2 mt-2">
            <div class="row mt-3 mb-4">
                <div class="col">
                    <h3>My Profile</h3>
                </div>
            </div>
            <EditForm Model="@userProfile" OnValidSubmit="HandleValidSumbitAsync">
                <DataAnnotationsValidator />
                <div class="row mb-3">
                    <div class="col">
                        <label for="userprofile-email-input">Email</label>
                        <InputText @bind-Value="@userProfile.Email" id="userprofile-email-input" class="form-control border-square" />
                        <ValidationMessage For="@(() => userProfile.Email)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="userprofile-firstname-input">First Name</label>
                        <InputText @bind-Value="@userProfile.FirstName" id="userprofile-firstname-input" class="form-control border-square" />
                        <ValidationMessage For="@(() => userProfile.FirstName)" />
                    </div>
                    <div class="col">
                        <label for="userprofile-firstname-input">Last Name</label>
                        <InputText @bind-Value="@userProfile.LastName" id="userprofile-lastname-input" class="form-control border-square" />
                        <ValidationMessage For="@(() => userProfile.LastName)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="userprofile-firstname-input">Font Color</label>
                        <InputText @bind-Value="@userProfile.FontColor" id="userprofile-firstname-input" class="form-control border-square" type="color" />
                        <ValidationMessage For="@(() => userProfile.FontColor)" />
                    </div>
                    <div class="col">
                        <label for="userprofile-firstname-input">BG Color</label>
                        <InputText @bind-Value="@userProfile.BgColor" id="userprofile-lastname-input" class="form-control border-square" type="color" />
                        <ValidationMessage For="@(() => userProfile.BgColor)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <h6 class="mb-3">Preview</h6>
                        @*<p><IconUserInitials UserProfile="@userProfile"></IconUserInitials>@userProfile.FirstName @userProfile.LastName</p>*@
                        <p><UserInitialsIconAndName UserProfile="@userProfile"></UserInitialsIconAndName></p>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <button type="submit" class="btn btn-primary border-square">@(isNewProfile ? "Create": "Save")</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="col">

    </div>
</div>


@code {
    private UserProfile userProfile = new();

    private bool isNewProfile;

    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Get User Id
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        await GetUserProfileAsync();

        // Hide the breadcrump nav
        _breadcrumb.Hide();
    }

    private async void HandleValidSumbitAsync()
    {
        if (isNewProfile)
        {
            await _userProfileService.Add(userProfile);
        }
        else
        {
            await _userProfileService.Update(userProfile);
        }

        await GetUserProfileAsync();
        StateHasChanged();
    }

    private async Task GetUserProfileAsync()
    {
        userProfile = await _userProfileService.Get(userId);

        isNewProfile = false;

        if (userProfile is null)
        {
            isNewProfile = true;
            userProfile = new();
            userProfile.Id = userId;
            var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
            userProfile.Email = user.FindFirst(c => c.Type.Contains("emailaddress"))?.Value;
        }
    }


}
