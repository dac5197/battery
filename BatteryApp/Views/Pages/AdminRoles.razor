@page "/admin/roles"

@layout AdminLayout

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider _authStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager



<div class="row">
    <div class="col">
        <h3>Admin - Roles</h3>
    </div>
</div>
<div class="row">
    <div class="col">
        <table class="table table-hover table-sm">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var role in roles.OrderBy(x => x.Name))
                {
                    <tr>
                        <td>@role.Name</td>
                        <td>
                            <button type="button" 
                                    class="btn btn-info btn-sm border-square" 
                                    data-toggle="modal"
                                    data-target="#identityRoleModal"
                                    @onclick="@(() => SetEditRoleToExisting(role))">
                                Edit
                            </button>
                            <button type="button" 
                                    class="btn btn-danger btn-sm border-square" 
                                    data-toggle="modal"
                                    data-target="#confirmDeleteModal"
                                    @onclick="@(() => SetEditRoleToExisting(role))">X</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button"
                class="btn btn-success btn-sm border-square"
                data-toggle="modal"
                data-target="#identityRoleModal"
                style="width: 32px;"
                title="Add Role"
                @onclick="@SetEditRoleToNew">
            <span class="oi oi-plus"></span>
        </button>
    </div>
</div>

<!-- Modals -->
<IdentityRoleDetailModal Role="@editRole" RoleName="@editRole.Name" ParentStateChanged="@GetRoles"></IdentityRoleDetailModal>
<ConfirmDeleteModal ModalTitle="Confirm Delete" ParentDeleteAction="@DeleteRole">
    <ModalBody>
        <p>Role: @editRole.Name</p>
        <br />
        <p>Deleting this Role will delete it and all associations with Users.</p>
        <p>Do you want to continue?</p>
    </ModalBody>
</ConfirmDeleteModal>

@code {        
    private List<IdentityRole> roles = new();

    private IdentityRole editRole = new();


    protected override void OnInitialized()
    {
        GetRoles();
    }

    private void SetEditRoleToNew()
    {
        editRole = new();
    }

    private void GetRoles()
    {
        editRole = new();

        roles = new(_RoleManager.Roles.ToList());
        StateHasChanged();
    }

    private void SetEditRoleToExisting(IdentityRole role)
    {
        editRole = role;
    }

    private async void DeleteRole()
    {
        await _RoleManager.DeleteAsync(editRole);
        GetRoles();
    }
}
