@page "/admin/users"

@layout AdminLayout

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider _authStateProvider
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager

@inject IBatteryService _batteryService
@inject IChargeService _chargeService

<div class="row">
    <div class="col">
        <h3>Admin - Users</h3>
    </div>
</div>
<div class="row">
    <div class="col">
        <table class="table table-hover table-sm small">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>EmailConfirmed?</th>
                    <th>Roles</th>
                    <th>Battery Count</th>
                    <th>Charge Count</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.EmailConfirmed</td>
                        <td>
                            @if (userRoles.ContainsKey(user.Id))
                            {
                                @foreach (var roleStr in userRoles[user.Id])
                                {
                                    @($"{roleStr} ")
                                }
                            }
                        </td>
                        <td>@userBatteryCounts.GetValueOrDefault(user.Id)</td>
                        <td>@userChargeCounts.GetValueOrDefault(user.Id)</td>
                        <td>
                            <button type="button"
                                    class="btn btn-info btn-sm border-square"
                                    data-toggle="modal"
                                    data-target="#identityUserModal"
                                    @onclick="@(() => SetEditUserToExisting(user))">
                                Edit
                            </button>
                            <button type="button"
                                    class="btn btn-danger btn-sm border-square"
                                    @onclick="@(() => SetEditUserToExisting(user))">
                                X
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

<!-- Modals -->
<IdentityUserDetailModal User="editUser" UserRoles="@editUserRoles" AllRoles="@allRoles" ParentStateChanged="@GetUsers"></IdentityUserDetailModal>


@code {
    private Dictionary<string, List<string>> userRoles = new();
    private Dictionary<string, int> userBatteryCounts = new();
    private Dictionary<string, int> userChargeCounts = new();

    private List<IdentityUser> users = new();

    private List<string> allRoles = new();

    private List<string> editUserRoles = new();

    private IdentityUser editUser = new();

    protected override async Task OnInitializedAsync()
    {
        users = _UserManager.Users.ToList();
        allRoles = _RoleManager.Roles.Select(x => x.Name).ToList();
        await GetUserRoles();
        await InitializeCounts();
    }

    private async Task InitializeCounts()
    {
        foreach (var user in users)
        {
            int batteryCount = await _batteryService.GetCount(user.Id);
            userBatteryCounts.Add(user.Id, batteryCount);

            int chargeCount = await _chargeService.GetCount(user.Id);
            userChargeCounts.Add(user.Id, chargeCount);
        }
    }

    private async void GetUsers()
    {
        editUser = new();
        users = new(_UserManager.Users.ToList());
        await GetUserRoles();
        StateHasChanged();
    }

    private async Task GetUserRoles()
    {
        userRoles = new();

        foreach (var user in users)
        {
            var roles = await _UserManager.GetRolesAsync(user);

            userRoles.Add(user.Id, roles.ToList());

            //string strRoles = "";

            //foreach (var role in roles)
            //{
            //    userRoles.Add(user.Id, role);
            //}

            //if (String.IsNullOrWhiteSpace(strRoles))
            //{
            //    strRoles = "N/A";
            //}

            //userRoles.Add(user.Id, strRoles);
        }
    }

    private void SetEditUserToNew()
    {
        editUser = new();
    }

    private void SetEditUserToExisting(IdentityUser user)
    {
        editUser = user;
        editUserRoles = new(userRoles[user.Id]);
    }

}
