@page "/charges"

@inject AuthenticationStateProvider _authStateProvider
@inject IChargeService _chargeService
@inject IStatusService _statusService
@inject IJSRuntime _jsRuntime


<AuthorizeView>
    <Authorized>

        <h3>Charge List</h3>

        @if (charges == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <p>Hello, @context.User.Identity.Name!</p>
            <div>
                <button data-toggle="modal" data-target="#chargeModal" class="btn btn-primary" value="Add Charge" @onclick="(() => InitializeChargeObject())">Add Charge</button>
            </div>


            @foreach (var status in statuses.OrderByDescending(x => x.Order))
            {
                <h4>@status.Name</h4>
                @foreach (var charge in charges.Where(x => x.StatusId == status.Id))
                {
                    <ChargeListItem Charge="@charge" SetChargeItem="@SetChargObject"></ChargeListItem>
                }
            }


            <ChargeDetailModal Charge="@chargeObject" ParentStateChanged="@StateChanged"></ChargeDetailModal>

            <ConfirmDeleteDialog Charge="@chargeObject" Delete="@DeleteCharge"></ConfirmDeleteDialog>
        }
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Charge chargeObject = new Charge();
    private List<Charge> charges = new();
    private List<Status> statuses = new();

    protected override async Task OnInitializedAsync()
    {
        charges = await _chargeService.Get();
        statuses = await _statusService.Get();
    }

    private void InitializeChargeObject()
    {
        chargeObject = new Charge();
    }

    private async void StateChanged()
    {
        charges = await _chargeService.Get();
        StateHasChanged();
    }

    private void SetChargObject(Charge charge)
    {
        chargeObject = charge;
    }

    private async Task DeleteCharge()
    {
        await _chargeService.Delete(chargeObject.Id);
        await _jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        StateChanged();
        InitializeChargeObject();
    }
}
