@page "/charge/{id:int}"

@inject IBreadcrumbManager _breadcrumb
@inject IBatteryService _batteryService
@inject ICalculateTextareaRows _calcTextareaRows
@inject ICategoryService _categoryService
@inject IChargeService _chargeService
@inject IInitializeChargeChildToParent _chargeRelationship
@inject IJSRuntime _jsRuntime
@inject IPriorityService _priorityService
@inject IStatusService _statusService
@inject ITagController _tagController
@inject IUserProfileService _userProfileService

<div class="small mt-4">
    <EditForm Model="charge" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2 my-2 ">
                    <div class="cat-border pl-4">
                        <div class="row">
                            <div class="col-lg-10">
                                <div class="row pl-4">
                                    <div class="col-lg-12 p-0">
                                        <h6 class="card-title align-items-center">
                                            <span class="oi @category.Icon cat-icon"></span>
                                            @charge.Id
                                        </h6>
                                    </div>
                                </div>
                                <div class="row pl-0">
                                    <div class="col-lg-12">
                                        <InputText @bind-Value="@charge.Title" id="title-input" class="form-control transparent-input strong-input-text" />
                                        <ValidationMessage For="@(() => charge.Title)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <button type="submit" class="btn btn-sm btn-block btn-primary m-1 border-square"><strong>Save</strong></button>
                                <button type="button" class="btn btn-sm btn-block btn-danger m-1 border-square" data-toggle="modal" data-target="#deleteChargeModal"><strong>Delete</strong></button>
                            </div>
                        </div>

                        
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2 my-2">
                    <div class="row px-4">
                        <div class="col px-0">
                            <div>
                                Tags
                                <a class="new-item mx-1" data-toggle="modal" data-target="#addTagModal">
                                    <span class="oi oi-plus"></span>
                                </a>
                            </div>
                        </div>
                    </div>
                    @if (tags.Count > 0)
                    {
                        <div class="row pl-4 mt-1 mb-2">
                            <div class="col-lg-12 px-0">
                                @foreach (var tag in tags)
                                {
                                    <TagListItem Charge="@charge" Tag="@tag" ParentStateChanged="@TagStateChanged" SetTagToDelete="@SetTagToDelete" SetTagToEdit="@SetTagToEdit" ShowRemove="true"></TagListItem>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2 my-2">
                    <div class="row px-4">
                        <div class="col-lg-6">
                            <div class="row mb-0">
                                <div class="col">
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center" for="status-input">Status: </label>
                                        <div class="col">
                                            <InputSelect @bind-Value="@charge.StatusId" class="form-control form-control-sm" id="status-input">
                                                @foreach (var status in statuses)
                                                {
                                                    <option Value="@status.Id"> @status.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => charge.StatusId)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center" for="priority-input">Priority</label>
                                        <div class="col">
                                            <InputSelect @bind-Value="@charge.PriorityId" class="form-control form-control-sm" id="priority-input">
                                                @foreach (var priority in priorities)
                                                {
                                                    <option Value="@priority.Id"> @priority.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => charge.PriorityId)" />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center" for="priority-input">Priority</label>
                                        <div class="col">
                                            <InputSelect @bind-Value="@charge.CategoryId" class="form-control form-control-sm" id="priority-input">
                                                @foreach (var category in categories.OrderBy(x => x.Name))
                                                {
                                                    <option Value="@category.Id"> @category.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => charge.CategoryId)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="created-input">Created: </label>
                                        <div class="col">
                                            <input type="text" value="@charge.Created.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="created-input" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="updated-input">Updated:</label>
                                        <div class="col">
                                            <input type="text" value="@charge.Updated.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="updated-input" readonly />
                                        </div>
                                    </div>
                                    <div class="form-group row mb-2">
                                        <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="completed-input">Completed:</label>
                                        <div class="col">
                                            <input type="text" value="@charge.Completed?.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="completed-input" readonly />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <h6>Owner</h6>
                            
                            <p><UserInitialsIcon UserProfile="@userProfile"></UserInitialsIcon>@userProfile.FirstName @userProfile.LastName</p>
                        </div>
                        <div class="col-lg-3 align-items-center">
                            <h6>Collaborators</h6>
                            <p>TBD</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 pr-2">
                <div class="card border-square shadow-sm p-2 my-2">
                    <div class="form-group">
                        <h6><label for="desc">Description</label></h6>
                        <InputTextArea @bind-Value="@charge.Description" @oninput="@(e => ResizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control form-control-sm">@charge.Description</InputTextArea>
                        <ValidationMessage For="@(() => charge.Description)" />
                    </div>
                </div>
                <div class="card border-square shadow-sm p-2 my-2">
                    <div class="form-group">
                        <h6>Notes</h6>
                        <textarea rows="3" id="notes" class="form-control form-control-sm"></textarea>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 px-2">
                <div class="card border-square shadow-sm p-2 my-2 h-100">
                    <div class="d-flex">
                        <div><h6>Related Items</h6></div>
                        <div class="ml-auto pr-3">
                            <a class="new-item" data-toggle="modal" data-target="#chargeModal" @onclick="(() => InitializeSpark())">
                                <span class="oi oi-plus"></span>
                            </a>
                        </div>
                    </div>
                    <hr />
                    <div class="card border-0 p-0">
                        <p>Battery</p>
                        <hr />
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item border-0">
                                <a href="@($"/battery/{battery.Id}")" class="link-black">
                                    <span class="oi oi-battery-full" style="color: steelblue"></span>
                                    @battery.Id |
                                    @battery.Name
                                </a>
                            </li>
                        </ul>
                    </div>
                    @if (charge.ParentId is not null)
                    {
                        <div class="card border-0 p-0">
                            <p>Parent</p>
                            <hr />
                            <ul class="list-group list-group-flush">
                                <ChargeDetail_RelatedListItem Charge="@parent" IsParent="true"></ChargeDetail_RelatedListItem>
                            </ul>
                        </div>
                    }
                    @if (children.Count > 0)
                    {
                        <div class="card border-0 p-0">
                            <p>Children</p>
                            <hr />
                            <ul class="list-group list-group-flush">
                                @foreach (var child in children)
                                {
                                    <ChargeDetail_RelatedListItem Charge="@child" IsParent="false"></ChargeDetail_RelatedListItem>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-3 pl-2">
                <div class="card border-square shadow-sm p-2 my-2 h-100">
                    <h6>Work Hours</h6>
                    <hr />
                    <h3>TBD</h3>
                </div>
            </div>
        </div>
    </EditForm>
</div>

<ChargeDetailModal Charge="@spark" ParentStateChanged="@ChildrenStateChanged"></ChargeDetailModal>
<DeleteChargeModal Charge="@charge" Children="@children"></DeleteChargeModal>
<AddTagModal Battery="@battery" Charge="@charge" ParentStateChanged="@TagStateChanged" Tags="batteryTags"></AddTagModal>
<EditTagModal Tag="@tagToEdit" ParentStateChanged="@TagStateChanged"></EditTagModal>
<DeteteTagModal Delete="@DeleteTag"></DeteteTagModal>

<style>
    .cat-icon {
        color: @category.IconColor;
    }
    .cat-border {
        box-shadow: 20px 0 @category.IconColor inset;
    }


    .new-item {
        color: forestgreen !important;
        border-bottom: solid transparent;
    }

    .new-item:hover {
        color: forestgreen;
        border-bottom: solid;
        border-bottom-color: forestgreen;
    }

    .remove-item {
        color: darkred !important;
        border-bottom: solid transparent;
    }

        .remove-item:hover {
            color: darkred;
            border-bottom: solid;
            border-bottom-color: darkred;
        }

    .border-bottom-only {
        border-right: none;
        border-left: none;
        border-top: none;
        border-bottom: solid;
    }

</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Battery battery = new();
    private Category category = new();
    private Charge charge = new Charge();
    private Charge parent = new();
    private Charge spark = new();
    private Tag tagToDelete = new();
    private Tag tagToEdit = new();
    private UserProfile userProfile = new();

    private List<Category> categories = new();
    private List<Charge> children = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();
    private List<Tag> batteryTags = new();
    private List<Tag> tags = new();

    private int minTextareaRows = 5;
    private int maxTextareaRows = 15;
    private int textareaRows;

    private string dateTimeFormat = "MM/dd/yyyy HH:mm:ss";

    protected override async Task OnInitializedAsync()
    {

        charge = await _chargeService.Get(Id);

        battery = await _batteryService.Get(charge.BatteryId);
        children = await _chargeService.GetChildren(charge);
        parent = await _chargeService.GetParent(charge);

        categories = await _categoryService.Get();
        category = categories.Where(x => x.Id == charge.CategoryId).FirstOrDefault();
        priorities = await _priorityService.Get(charge.OwnerId);
        statuses = await _statusService.Get();
        tags = await _tagController.GetAllTagsForChargeAsync(charge.Id);
        batteryTags = await _tagController.GetAllTagsForBatteryAsync(battery);

        userProfile = await _userProfileService.Get(charge.OwnerId);

        textareaRows = _calcTextareaRows.CalculateRows(charge.Description);

        await _breadcrumb.Initialize(charge);
        _breadcrumb.Show();
    }

    private async void HandleValidSubmit()
    {
        await _chargeService.Update(charge);
        charge = await _chargeService.Get(Id);
        category = await _categoryService.Get(charge.CategoryId);
        StateHasChanged();
    }

    private async void InitializeSpark()
    {
        spark = new Charge();
        var initialStatus = await _statusService.GetInitialStatus();
        spark.StatusId = initialStatus.Id;
        spark = await _chargeRelationship.SetRelationshipAsync(charge, spark);
    }

    private void ResizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value, minTextareaRows, maxTextareaRows);
    }

    private async void ChildrenStateChanged()
    {
        children = await _chargeService.GetChildren(charge);
        StateHasChanged();
    }

    private async void TagStateChanged()
    {
        tags = await _tagController.GetAllTagsForChargeAsync(charge.Id);
        batteryTags = await _tagController.GetAllTagsForBatteryAsync(battery);
        StateHasChanged();
    }

    private void SetTagToEdit(Tag tagFromChild)
    {
        tagToEdit = tagFromChild;
    }

    private void SetTagToDelete(Tag tagFromChild)
    {
        tagToDelete = tagFromChild;
    }

    private async void DeleteTag()
    {
        await _tagController.DeleteTagAndAllRelationshipsAsync(tagToDelete.Id);
        await _jsRuntime.InvokeAsync<object>("CloseModal", "deleteTagModal");
        TagStateChanged();
    }
}

