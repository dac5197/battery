@page "/charge/{id:int}"

@inject IBreadcrumbManager _breadcrumb
@inject IBatteryService _batteryService 
@inject ICalculateTextareaRows _calcTextareaRows
@inject ICategoryService _categoryService
@inject IChargeService _chargeService
@inject IInitializeChargeChildToParent _chargeRelationship
@inject IPriorityService _priorityService
@inject IStatusService _statusService
@inject IUserProfileService _userProfileService 

<div class="container-fluid px-0 small">
    <EditForm Model="charge" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="card border-bottom-0 border-square">
            <div class="card-header px-4 cat-border">
                <div class="row pl-4">
                    <div class="col-md-10 p-0">
                        <h6 class="card-title align-items-center">
                            <span class="oi @category.Icon cat-icon"></span>
                            @charge.Id
                        </h6>
                    </div>
                    <div class="col-md-2 p-0 d-flex justify-content-end">
                        <button type="submit" class="btn btn-sm btn-primary px-4">Save</button>
                    </div>
                </div>
                <div class="row pl-0">
                    <div class="col-md-10">
                        <InputText @bind-Value="@charge.Title" id="title-input" class="form-control transparent-input strong-input-text" />
                        <ValidationMessage For="@(() => charge.Title)" />
                    </div>
                </div>
            </div>
            <div class="card-header px-4 cat-border">
                <div class="row px-4">
                    <div class="col-md-6">
                        <div class="row mb-0">
                            <div class="col">
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center" for="status-input">Status: </label>
                                    <div class="col">
                                        <InputSelect @bind-Value="@charge.StatusId" class="form-control form-control-sm" id="status-input">
                                            @foreach (var status in statuses)
                                            {
                                                <option Value="@status.Id"> @status.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => charge.StatusId)" />
                                    </div>
                                </div>
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center" for="priority-input">Priority</label>
                                    <div class="col">
                                        <InputSelect @bind-Value="@charge.PriorityId" class="form-control form-control-sm" id="priority-input">
                                            @foreach (var priority in priorities)
                                            {
                                                <option Value="@priority.Id"> @priority.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => charge.PriorityId)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="created-input">Created: </label>
                                    <div class="col">
                                        <input type="text" value="@charge.Created" class="form-control form-control-sm" id="created-input" readonly />
                                    </div>
                                </div>
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="updated-input">Updated:</label>
                                    <div class="col">
                                        <input type="text" value="@charge.Updated" class="form-control form-control-sm" id="updated-input" readonly />
                                    </div>
                                </div>
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="completed-input">Completed:</label>
                                    <div class="col">
                                        <input type="text" value="@charge.Completed" class="form-control form-control-sm" id="completed-input" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <h6>Owner</h6>
                        <p>@userProfile.FirstName @userProfile.LastName</p>
                    </div>
                    <div class="col-md-3 align-items-center">
                        <h6>Collaborators</h6>
                        <p>TBD</p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 pr-0 border-0">
                    <div class="card border-0">
                        <div class="card-body">
                            <div class="form-group">
                                <h6><label for="desc">Description</label></h6>
                                <InputTextArea @bind-Value="@charge.Description" @oninput="@(e => ResizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control form-control-sm">@charge.Description</InputTextArea>
                                <ValidationMessage For="@(() => charge.Description)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 pr-0 border-0">
                        <div class="card border-0">
                            <div class="card-body">
                                <div class="form-group">
                                    <h6>Notes</h6>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 pl-0">
                    <div class="card border-0">
                        <div class="card-body">
                            <div class="d-flex">
                                <div><h6>Related Items</h6></div>
                                <div class="ml-auto pr-3">
                                    <a class="new-item" data-toggle="modal" data-target="#chargeModal" @onclick="(() => InitializeSpark())">
                                        <span class="oi oi-plus"></span>
                                    </a>
                                </div>
                            </div>
                            <hr />
                            <div class="card border-0">
                                <div class="card-body">
                                    <p>Battery</p>
                                    <hr />
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item border-0">
                                            <a href="@($"/battery/{battery.Id}")" class="link-black">
                                                <span class="oi oi-battery-full" style="color: steelblue"></span>
                                                @battery.Id |
                                                @battery.Name
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            @if (charge.ParentId is not null)
                            {
                                <div class="card border-0">
                                    <div class="card-body">
                                        <p>Parent</p>
                                        <hr />
                                        <ul class="list-group list-group-flush">
                                            <ChargeDetail_RelatedListItem Charge="parent" IsParent="true"></ChargeDetail_RelatedListItem>
                                        </ul>
                                    </div>
                                </div>
                            }
                            @if (children.Count > 0)
                            {
                                <div class="card border-0">
                                    <div class="card-body">
                                        <p>Children</p>
                                        <hr />
                                        <ul class="list-group list-group-flush">
                                            @foreach (var child in children)
                                            {
                                                <ChargeDetail_RelatedListItem Charge="child" IsParent="false"></ChargeDetail_RelatedListItem>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3 pl-0">
                    <div class="card border-0">
                        <div class="card-body">
                            <h6>Work Hours</h6>
                            <hr />
                            <h3>TBD</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    
</div>

<ChargeDetailModal Charge="@spark" ParentStateChanged="@StateChanged"></ChargeDetailModal>

<style>
    .cat-icon {
        color: @category.IconColor;
    }
    .cat-border {
        box-shadow: 20px 0 @category.IconColor inset;
    }
    .transparent-input {
        border: 0;
        background: none;
    }

    .strong-input-text {
        color: black;
        font-size: 1.5rem;
    }

    .new-item {
        color: forestgreen !important;
        border-bottom: solid transparent;
    }

    .new-item:hover {
        color: forestgreen;
        border-bottom: solid;
        border-bottom-color: forestgreen;
    }

    .border-bottom-only {
        border-right: none;
        border-left: none;
        border-top: none;
        border-bottom: solid;
    }
    .w-10ch {
        width: 10ch;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Battery battery = new();
    private Category category = new();
    private Charge charge = new Charge();
    private Charge parent = new();
    private Charge spark = new();
    private UserProfile userProfile = new();

    private List<Charge> children = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();

    private int minTextareaRows = 5;
    private int maxTextareaRows = 15;
    private int textareaRows;

    protected override async Task OnInitializedAsync()
    {

        charge = await _chargeService.Get(Id);

        battery = await _batteryService.Get(charge.BatteryId);
        children = await _chargeService.GetChildren(charge);
        parent = await _chargeService.GetParent(charge);

        category = await _categoryService.Get(charge.CategoryId);
        priorities = await _priorityService.Get(charge.OwnerId);
        statuses = await _statusService.Get();

        userProfile = await _userProfileService.Get(charge.OwnerId);

        textareaRows = _calcTextareaRows.CalculateRows(charge.Description);

        await _breadcrumb.Initialize(charge);
        _breadcrumb.Show();

    }

    private async void HandleValidSubmit()
    {
        await _chargeService.Update(charge);
        StateHasChanged();
    }

    private async void InitializeSpark()
    {
        spark = new Charge();
        var initialStatus = await _statusService.GetInitialStatus();
        spark.StatusId = initialStatus.Id;
        spark = await _chargeRelationship.SetRelationshipAsync(charge, spark);


    }

    private void ResizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value, minTextareaRows, maxTextareaRows);
    }

    private async void StateChanged()
    {
        children = await _chargeService.GetChildren(charge);
        StateHasChanged();
    }
}
