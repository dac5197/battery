@page "/"

@attribute [Authorize]

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navManager

@inject IBatteryService _batteryService
@inject IBreadcrumbManager _breadcrumb
@inject IChargeService _chargeService
@inject ICategoryService _categoryService
@inject IPriorityService _priorityService
@inject ISearchUtil _search
@inject IStatusService _statusService
@inject ITagController _tagController
@inject ITagService _tagService


@if (batteries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="small mt-2">
        <div class="row mb-3">
            <div class="col-lg-8">
                <div class="card border-square shadow-sm p-2 mt-2 h-100">
                    <h1>DACME Battery</h1>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card border-square shadow-sm p-2 mt-2 h-100">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <h5>
                                Active Batteries: <span class="float-right">@batteries.Count()</span>
                            </h5>
                        </li>
                        <li class="list-group-item">
                            <h5>
                                Active Charges: <span class="float-right">@charges.Count()</span>
                            </h5>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- Search Bar -->
        <div class="row mb-2">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2 mt-2">
                    <div class="row justify-content-center">
                        <div class="col-lg-3">
                            <button class="btn btn-success border-square" data-toggle="modal" data-target="#batteryDetailModal" value="Add Battery">Add Battery</button>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text border-0 bg-transparent mr-n5">
                                        <span class="oi oi-magnifying-glass"></span>
                                    </div>
                                </div>
                                <input type="text"
                                        class="form-control py-2 border-square bg-transparent pl-5"
                                        id="searchChargesInput"
                                        placeholder="Search"
                                        value="@searchText"
                                        @oninput="@(e => Search(e))" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-info border-square" @onclick="@ClearSearch">Clear</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="float-right">
                                <BtnGroup_TwoButtons BtnOneClass="@btnClassActiveBatteries"
                                                        BtnOneText="Active"
                                                        BtnOneAction="@GetActiveBatteries_Button"
                                                        BtnTwoClass="@btnClassAllBatteries"
                                                        BtnTwoText="All"
                                                        BtnTwoAction="@GetAllBatteries_Button"
                                                        QuestionToolTipAlignment="Right"
                                                        QuestionToolTipText="Toggle between Active Batteries and All Batteries"></BtnGroup_TwoButtons>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Active Battery List -->
        @foreach (var battery in _search.GetBatteries())
        {
            <div class="row mb-3">
                <div class="col-lg-12">
                    <div class="card border-square shadow-sm mt-2">
                        <div class="card-header p-1">
                            <button class="btn btn-sm btn-light toggle-button mx-1"
                                    title="Toggle Charges"
                                    type="button"
                                    @onclick="@(() => ToggleShowBatteryCharges(battery))">
                                @if (showBatteryCharges.ContainsKey(battery.Id))
                                {
                                    <BtnToggleCollapseExpand ShowCollapse="@showBatteryCharges[battery.Id]" />
                                }

                            </button>
                            @if (showBatteryTags.ContainsKey(battery.Id))
                            {
                                <button class="btn btn-sm btn-light mx-1"
                                        title="Toggle Tags"
                                        type="button"
                                        @onclick="@(() => ToggleShowBatteryTags(battery))">
                                    <IconTags />
                                </button>
                            }
                        </div>
                        <div class="card-header pr-4">

                            <NavLink href="@($"/battery/{battery.Id}")" class="link-black">
                                <span class="h3 @(battery.IsActive == false ? "completed" : "")">
                                    <IconBattery />
                                    @battery.Id | @_search.HighlightSearchText(searchText, battery.Name)
                                </span>
                            </NavLink>
                            <span class="h3 float-right">(@charges.Where(x => x.BatteryId == battery.Id).Count())</span>
                        </div>
                        @if (showBatteryTags.ContainsKey(battery.Id) ? showBatteryTags[battery.Id] : false)
                        {
                            <IndexTagList_Battery Tags="@tags.Where(x => x.BatteryId == battery.Id).ToList()"
                                                    TagCounts="@tagActiveCounts"
                                                    FilterChargesByTag="@SearchTags"
                                                    SetManageTagsBattery="@SetManageTagsBattery"></IndexTagList_Battery>
                        }

                        @if (showBatteryCharges.ContainsKey(battery.Id) ? showBatteryCharges[battery.Id] : false)
                        {
                            <div class="card-body">
                                @foreach (var charge in _search.GetCharges().Where(x => x.BatteryId == battery.Id).Where(x => x.ParentId is null))
                                {
                                    <IndexChargeCardListItem @key="@charge"
                                                                Charge="@charge"
                                                                Category="@categories.Where(x => x.Id == charge.CategoryId).FirstOrDefault()"
                                                                Categories="@categories.Where(x => x.BatteryId == battery.Id).ToList()"
                                                                Priority="@priorities.Where(x => x.Id == charge.PriorityId).FirstOrDefault()"
                                                                Priorities="@priorities"
                                                                PriorityDispalyWidth="@priorities.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.DisplayName.Length).First().DisplayName.Length"
                                                                Status="@statuses.Where(x => x.Id == charge.StatusId).FirstOrDefault()"
                                                                Statuses="@statuses"
                                                                CompleteStatus="@statuses.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.Order).First()"
                                                                StatusDispalyWidth="statuses.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.Name.Length).First().Name.Length"
                                                                ShowChildren="@showChargeChildren"
                                                                ShowTags="@(showBatteryTags.ContainsKey(battery.Id) ? showBatteryTags[battery.Id] : false)"
                                                                SearchText="@searchText"></IndexChargeCardListItem>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    <!-- Modals -->
    <BatteryDetailModal ParentStateChanged="@BatteriesChanged" UserId="@userId"></BatteryDetailModal>
    <ManageTagsModal Battery="@manageTagsBattery"
                        Tags="@tags.Where(x => x.BatteryId == manageTagsBattery.Id).ToList()"
                        TagAllCounts="@tagCounts"
                        TagActiveCounts="@tagActiveCounts"
                        ParentStateChanged="@TagsChanged"></ManageTagsModal>
}


<style>
    .toggle-button {
        /*height: 39px;
        width: 39px;*/
        border-radius: 0;
        text-align: center;
    }
</style>

@code {
    private List<Battery> batteries = new();
    private List<Charge> charges = new();
    private List<Category> categories = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();
    private List<Tag> tags = new();

    private Dictionary<int, bool> showBatteryCharges = new();
    private Dictionary<int, bool> showBatteryTags = new();
    private Dictionary<int, int> tagCounts = new();
    private Dictionary<int, int> tagActiveCounts = new();

    private Battery manageTagsBattery = new();

    private string btnActive = "btn-secondary";
    private string btnInactive = "btn-outline-secondary";
    private string btnClassActiveBatteries;
    private string btnClassAllBatteries;
    private string searchText = "";
    private string userId;

    private bool showChargeChildren = false;

    protected override async Task OnInitializedAsync()
    {
        // Get Id of logged in user
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;


        batteries = await _batteryService.GetActiveAsync(userId);
        charges = await _chargeService.GetActiveAsync(userId);
        categories = await _categoryService.GetAsync(userId);
        priorities = await _priorityService.GetAsync(userId);
        statuses = await _statusService.GetAsync(userId);
        tags = await _tagService.GetAsync(userId);

        btnClassActiveBatteries = btnActive;
        btnClassAllBatteries = btnInactive;
        await GetActiveBatteries();

        // Hide the breadcrump nav
        _breadcrumb.Hide();
    }

    private async Task GetActiveBatteries()
    {
        batteries = await _batteryService.GetActiveAsync(userId);
        await Initialize();
    }

    private async Task GetAllBatteries()
    {
        batteries = await _batteryService.GetAsync(userId);
        await Initialize();
    }

    private async void GetActiveBatteries_Button()
    {
        btnClassActiveBatteries = btnActive;
        btnClassAllBatteries = btnInactive;

        await GetActiveBatteries();
        StateHasChanged();
    }

    private async void GetAllBatteries_Button()
    {
        btnClassActiveBatteries = btnInactive;
        btnClassAllBatteries = btnActive;

        await GetAllBatteries();
        StateHasChanged();
    }

    private async void BatteriesChanged()
    {
        batteries = await _batteryService.GetActiveAsync(userId);
        _search.Initialize(batteries);
        InitializeShowBatteryChargesDict();
        InitializeShowBatteryTagsDict();

        StateHasChanged();
    }

    private async Task Initialize()
    {
        // Get entities
        charges = await _chargeService.GetActiveAsync(userId);
        categories = await _categoryService.GetAsync(userId);
        priorities = await _priorityService.GetAsync(userId);
        statuses = await _statusService.GetAsync(userId);
        tags = await _tagService.GetAsync(userId);

        // Initialize other values
        SortChargesByStatus();
        InitializeShowBatteryChargesDict();
        InitializeShowBatteryTagsDict();
        await InitializeChargeChildren();
        await InitializeTagSearch();
        await GetTagCounts();


        // Initialize filtered lists
        _search.Initialize(batteries, charges);
    }

    private void InitializeShowBatteryChargesDict()
    {
        showBatteryCharges.Clear();

        foreach (var battery in batteries)
        {
            showBatteryCharges.Add(battery.Id, false);
        }
    }

    private void InitializeShowBatteryTagsDict()
    {
        showBatteryTags.Clear();

        foreach (var battery in batteries)
        {
            var batteryTags = tags.Where(x => x.BatteryId == battery.Id).ToList();

            if (batteryTags.Any())
            {
                showBatteryTags.Add(battery.Id, false);
            }
        }
    }

    private async Task InitializeChargeChildren()
    {
        foreach (var charge in charges)
        {
            var children = await _chargeService.GetChildrenAsync(charge);
            _search.AddChargeChildren(charge, children);
        }
    }

    private async Task InitializeTagSearch()
    {
        List<ChargeTagRelation> tagRelations = new();

        foreach (var battery in batteries)
        {
            var relations = await _tagController.GetAllRelationsForBatteryAsync(battery);
            tagRelations.AddRange(relations);
        }

        _search.Initialize(tagRelations);
    }

    private void ResetShowBatteryChargesDict()
    {
        showBatteryCharges = showBatteryCharges.Keys.ToDictionary(x => x, _ => false);
    }

    private void ToggleShowBatteryCharges(Battery battery)
    {
        showBatteryCharges[battery.Id] = !showBatteryCharges[battery.Id];
    }

    private void ToggleShowBatteryTags(Battery battery)
    {
        showBatteryTags[battery.Id] = !showBatteryTags[battery.Id];
        ClearSearch();
    }

    private void SortChargesByStatus()
    {
        charges = (from charge in charges
                   join status in statuses
                   on charge.StatusId equals status.Id
                   orderby status.Order
                   select charge).ToList();
    }

    private void ClearSearch()
    {
        searchText = "";

        _search.Clear();

        showChargeChildren = false;

        StateHasChanged();
    }

    private void Search(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();

        _search.SearchBatteries(searchText);
        _search.SearchCharges(searchText);
        _search.SearchChildren(searchText);

        ResetShowBatteryChargesDict();

        foreach (var battery in _search.GetBatteries())
        {
            ShowBatteryByBattery(battery);
        }

        showChargeChildren = true;
    }

    private void SearchTags(Tag tag)
    {
        if (tag == _search.GetTag())
        {
            ClearSearch();
            return;
        }

        _search.Search(tag);

        ShowBatteryByBattery(batteries.Where(x => x.Id == tag.BatteryId).FirstOrDefault());
        showChargeChildren = true;

        StateHasChanged();
    }

    private void ShowBatteryByBattery(Battery battery)
    {
        if (showBatteryCharges.ContainsKey(battery.Id))
        {
            showBatteryCharges[battery.Id] = true;
        }
    }

    private void ShowBatteryByCharge(Charge charge)
    {
        showBatteryCharges[charge.BatteryId] = true;
    }

    private async Task SetManageTagsBattery(int batteryId)
    {
        var battery = batteries.Where(x => x.Id == batteryId).FirstOrDefault();
        manageTagsBattery = battery;
        await GetTagCounts();
    }

    private async void TagsChanged()
    {
        tags = await _tagService.GetAsync(userId);
        StateHasChanged();
    }

    private async Task GetTagCounts()
    {
        tagCounts = await _tagController.CountAllChargeTagRelationshipsAsync(userId);
        tagActiveCounts = await _tagController.CountActiveChargeTagRelationshipsAsync(userId);
    }

}
