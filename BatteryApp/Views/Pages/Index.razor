@page "/"

@inject AuthenticationStateProvider _authStateProvider
@inject IBatteryService _batteryService
@inject IBreadcrumbManager _breadcrumb
@inject IChargeService _chargeService
@inject ICategoryService _categoryService
@inject IPriorityService _priorityService
@inject IStatusService _statusService

<AuthorizeView>
    <Authorized>
        @if (batteries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="small mt-2">
                <div class="row mb-3">
                    <div class="col-lg-8">
                        <div class="card border-square shadow-sm p-2 mt-2 h-100">
                            <h1>DACME Battery</h1>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="card border-square shadow-sm p-2 mt-2 h-100">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <h5>
                                        Active Batteries: <span class="float-right">@batteries.Count()</span>
                                    </h5>
                                </li>
                                <li class="list-group-item">
                                    <h5>
                                        Active Charges: <span class="float-right">@charges.Count()</span>
                                    </h5>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Search Bar -->
                <div class="row mb-2">
                    <div class="col-lg-12">
                        <div class="card border-square shadow-sm p-2 mt-2">
                            <div class="row justify-content-center">

                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text border-0 bg-transparent mr-n5">
                                                <span class="oi oi-magnifying-glass"></span>
                                            </div>
                                        </div>
                                        <input type="text"
                                               class="form-control py-2 border-square bg-transparent pl-5"
                                               id="searchChargesInput"
                                               placeholder="Search" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-outline-info border-square">Clear</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Active Battery List -->
                @foreach (var battery in batteries)
                {
                    <div class="row mb-3">
                        <div class="col-lg-12">
                            <div class="card border-square shadow-sm p-2 mt-2">
                                <div class="card-header pr-4">
                                    <button class="btn btn-secondary toggle-button mr-2" type="button" @onclick="@(() => ToggleShowBatteryCharges(battery))">
                                        @if (showBatteryCharges[battery.Id])
                                        {
                                            <span class="oi oi-collapse-up h4 m-0"></span>
                                        }
                                        else
                                        {
                                            <span class="oi oi-expand-down h4 m-0"></span>
                                        }
                                    </button>
                                    <NavLink href="@($"/battery/{battery.Id}")" class="link-black">
                                        <span class="h3">
                                            <IconBattery />
                                            @battery.Id | @battery.Name
                                        </span>
                                    </NavLink>
                                    <span class="h3 float-right">(@charges.Where(x => x.BatteryId == battery.Id).Count())</span>
                                </div>
                                @if (showBatteryCharges[battery.Id])
                                {
                                    <div class="card-body">
                                        @foreach (var charge in charges.Where(x => x.BatteryId == battery.Id))
                                        {
                                            <IndexChargeCardListItem Charge="@charge"
                                                                     Category="@categories.Where(x => x.Id == charge.CategoryId).FirstOrDefault()"
                                                                     Categories="@categories.Where(x => x.BatteryId == battery.Id).ToList()"
                                                                     Priority="@priorities.Where(x => x.Id == charge.PriorityId).FirstOrDefault()"
                                                                     PriorityDispalyWidth="@priorities.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.DisplayName.Length).First().DisplayName.Length"
                                                                     Status="@statuses.Where(x => x.Id == charge.StatusId).FirstOrDefault()"
                                                                     CompleteStatus="@statuses.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.Order).First()"
                                                                     StatusDispalyWidth="statuses.Where(x => x.BatteryId == battery.Id).OrderByDescending(x => x.Name.Length).First().Name.Length"
                                                                     ShowChildren="@false"></IndexChargeCardListItem>
                                        }
                                    </div>
                                }
                            </div>




                        </div>
                    </div>
                }



            </div>
        }
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

<style>
    .toggle-button {
        height: 49px;
        width: 49px;
        border-radius: 0;
        text-align: center;
    }
</style>

@code {
    private string userId;

    private List<Battery> batteries = new();
    private List<Charge> charges = new();
    private List<Category> categories = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();

    private Dictionary<int, bool> showBatteryCharges = new();

    protected override async Task OnInitializedAsync()
    {
        // Get Id of logged in user
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        // Get entities
        batteries = await _batteryService.GetActive(userId);
        charges = await _chargeService.GetActiveParentsOnly(userId);
        categories = await _categoryService.Get(userId);
        priorities = await _priorityService.Get(userId);
        statuses = await _statusService.Get(userId);

        InitializeShowBatteryChargesDict();
        SortChargesByStatus();

        // Hide the breadcrump nav
        _breadcrumb.Hide();
    }

    private void InitializeShowBatteryChargesDict()
    {
        foreach (var battery in batteries)
        {
            showBatteryCharges.Add(battery.Id, false);
        }
    }

    private void ToggleShowBatteryCharges(Battery battery)
    {
        showBatteryCharges[battery.Id] = !showBatteryCharges[battery.Id];
    }

    private void SortChargesByStatus()
    {
        charges = (from charge in charges
                   join status in statuses
                   on charge.StatusId equals status.Id
                   orderby status.Order
                   select charge).ToList();
    }
}
