@page "/battery/{id:int}"

@attribute [Authorize(Roles = "Admin, User")]

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navManager
@inject IConfiguration _configuration

@inject IBatteryService _batteryService
@inject IBreadcrumbManager _breadcrumb
@inject ICalculateTextareaRows _calcTextareaRows
@inject ICategoryService _categoryService
@inject IChargeChildController _chargeChildController
@inject IChargeLifecycle _chargeLifecycle
@inject IChargeOpenChildrenModalHelper _chargeOpenChildrenModalHelper
@inject IChargeService _chargeService
@inject IChargeCountService _chargeCountService
@inject IPriorityService _priorityService
@inject ISearchUtil _search
@inject IStatusService _statusService
@inject ITagController _tagController
@inject ITagService _tagService

@inject IJSRuntime _jsRuntime

@if (charges == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="small mt-2">
        <EditForm Context="formContext" Model="battery" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <!-- Battery Details -->
            <div class="row mb-3">
                <div class="col-lg-12">
                    <div class="card border-square shadow-sm p-2 mt-2">
                        <div class="row">
                            <div class="col-lg-10">
                                <div class="form-group row px-4">
                                    <label for="battery-name-input" class="col-sm-1 col-form-label pr-0" style="font-size: 1.5rem">
                                        <IconBattery />
                                        @battery.Id
                                    </label>
                                    <div class="col-sm-11 p-0">
                                        <InputText @bind-Value="@battery.Name" id="battery-name-input" class="form-control transparent-input strong-input-text" />
                                        <ValidationMessage For="@(() => battery.Name)" />
                                    </div>
                                </div>
                                <div class="row px-4">
                                    <div class="col-sm-8">
                                        <InputTextArea @bind-Value="@battery.Description" @oninput="@(e => ResizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control form-control-sm">@battery.Description</InputTextArea>
                                        <ValidationMessage For="@(() => battery.Description)" />
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group row mb-2">
                                            <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="created-input">Created: </label>
                                            <div class="col">
                                                <input type="text" value="@battery.Created.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="created-input" readonly />
                                            </div>
                                        </div>
                                        <div class="form-group row mb-2">
                                            <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="updated-input">Updated:</label>
                                            <div class="col">
                                                <input type="text" value="@battery.Updated.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="updated-input" readonly />
                                            </div>
                                        </div>
                                        <div class="form-group row mb-2">
                                            <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="battery-actvie-input">Active:</label>
                                            <div class="col">
                                                <InputCheckbox @bind-Value="@battery.IsActive" class="form-control form-control-sm form-check-inline" />
                                                <ValidationMessage For="@(() => battery.IsActive)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2">
                                <div class="dropdown my-2 float-right">
                                    <button class="btn btn-info border-square dropdown-toggle" type="button" id="dropdownOptionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="oi oi-menu"></span>
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-right border-square" aria-labelledby="dropdownOptionsMenu">
                                        <button class="dropdown-item" type="button" data-toggle="modal" data-target="#batteryDetailExiting_CategoryOptionsModal">Edit Categories</button>
                                        <button class="dropdown-item" type="button" data-toggle="modal" data-target="#batteryDetailExiting_PriorityOptionsModal">Edit Priorities</button>
                                        <button class="dropdown-item" type="button" data-toggle="modal" data-target="#batteryDetailExiting_StatusOptionsModal">Edit Statuses</button>
                                        <div class="dropdown-divider"></div>
                                        <button type="submit" class="dropdown-item">Save Battery</button>
                                        <div class="dropdown-divider"></div>
                                        <button class="dropdown-item" type="button" data-toggle="modal" data-target="#deleteBatteryModal">Delete Battery</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
        <div class="row mb-3">
            <div class="col-lg-12">
                <IndexTagList_Battery Tags="@tags"
                                      TagCounts="@(btnClassActiveCharges == btnActive ? tagActiveCounts : tagAllCounts)"
                                      FilterChargesByTag="@SearchTags"
                                      SetManageTagsBattery="@SetManageTagsBattery"></IndexTagList_Battery>
            </div>
        </div>

        <!-- Status and Priority Score Cards -->
        @*<div class="row mb-3">
                <div class="col-lg-6">
                    <div class="card border-square shadow-sm px-2 pt-2 pb-0">
                        <div class="row mb-2">
                            <div class="col-lg-12">
                                <a class="link-black" role="button" href="" @onclick="@ToggleStatusScoreCard" @onclick:preventDefault="true">
                                    <h6>
                                        @if (showStatusScoreCard)
                                        {
                                            <span class="oi oi-caret-bottom"></span>

                                        }
                                        else
                                        {
                                            <span class="oi oi-caret-right"></span>
                                        }
                                        Status
                                    </h6>
                                </a>
                            </div>
                        </div>
                        @if (showStatusScoreCard)
                        {
                            @foreach (var status in statuses.OrderBy(x => x.Order))
                            {
                                <div class="row mb-2">
                                    <div class="col-lg-3 pl-4 d-flex align-items-center">
                                        <p class="text-center">@status.Name</p>
                                    </div>
                                    <div class="col-lg-9">
                                        <div class="card-deck px-2">
                                            @foreach (var category in categories)
                                            {
                                                <CategoryCardCount Category="@category"
                                                                    Count="charges.Where(x => x.CategoryId == category.Id && x.StatusId == status.Id).Count()"
                                                                    FilterCharges="FilterChargesByStatus"
                                                                    FilterId="@status.Id"></CategoryCardCount>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card border-square shadow-sm px-2 pt-2 pb-0">
                        <div class="row mb-2">
                            <div class="col-lg-12">
                                <a class="link-black" role="button" href="" @onclick="@TogglePriorityScoreCard" @onclick:preventDefault="true">
                                    <h6>
                                        @if (showPriorityScoreCard)
                                        {
                                            <span class="oi oi-caret-bottom"></span>

                                        }
                                        else
                                        {
                                            <span class="oi oi-caret-right"></span>
                                        }
                                        Priority
                                    </h6>
                                </a>
                            </div>
                        </div>
                        @if (showPriorityScoreCard)
                        {
                            @foreach (var priority in priorities.OrderBy(x => x.Severity))
                            {
                                <div class="row mb-2">
                                    <div class="col-lg-3 pl-4">
                                        <p class="align-self-center">@priority.DisplayName</p>
                                    </div>
                                    <div class="col-lg-9">
                                        <div class="card-deck px-2">
                                            @foreach (var category in categories)
                                            {
                                                <CategoryCardCount Category="@category"
                                                                    Count="charges.Where(x => x.CategoryId == category.Id && x.PriorityId == priority.Id).Count()"></CategoryCardCount>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>*@
        <!-- Search -->
        <div class="row mb-3">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2">
                    <div class="row justify-content-center">
                        <div class="col-lg-3">

                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text border-0 bg-transparent mr-n5">
                                        <span class="oi oi-magnifying-glass"></span>
                                    </div>
                                </div>
                                <input type="text"
                                       class="form-control py-2 border-square bg-transparent pl-5"
                                       id="searchChargesInput"
                                       placeholder="Search"
                                       value="@searchText"
                                       @oninput="@(e => Search(e))" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-info border-square" @onclick="@ClearSearch">Clear</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="float-right">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Buttons Card -->
        <div class="row mb-3">
            <div class="col-lg-12">
                <div class="card border-square shadow-sm p-2">
                    <div class="row justify-content-center">
                        <div class="col-sm-12">
                            <button data-toggle="modal" data-target="#chargeModal" class="btn btn-success btn-sm mx-2 px-3 border-square" value="Add Charge" @onclick="(() => InitializeChargeObject())">Add Charge</button>
                            <BtnGroup_TwoButtons BtnOneClass="@btnClassActiveCharges"
                                                 BtnOneText="Active"
                                                 BtnOneAction="@SetActiveChargesFilter"
                                                 BtnTwoClass="@btnClassAllCharges"
                                                 BtnTwoText="All"
                                                 BtnTwoAction="@SetAllChargesFilter"
                                                 QuestionToolTipAlignment="Center"
                                                 QuestionToolTipText="Toggle between Active Items (Open items or items completed within the last 3 days) and All Items"></BtnGroup_TwoButtons>
                            <BtnGroup_TwoButtons BtnOneClass="@btnClassChargeCardView"
                                                 BtnOneText="Card View"
                                                 BtnOneAction="@ShowChargeCardView"
                                                 BtnTwoClass="@btnClassChargeTableView"
                                                 BtnTwoText="Table View"
                                                 BtnTwoAction="@ShowChargeTableView"
                                                 QuestionToolTipAlignment="Right"
                                                 QuestionToolTipText="Toggle between displaying Charges in lanes with cards or in a table."></BtnGroup_TwoButtons>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (showChargeCardView)
        {
            <!-- Charge Item List by Status -->
            <CascadingValue Name="Categories" Value="@categories">
                <CascadingValue Name="Priorities" Value="@priorities">
                    <CascadingValue Name="Statuses" Value="@statuses">
                        <CascadingValue Name="SearchText" Value="@searchText">
                            <CascadingValue Name="ShowChildren" Value="@showChargeCardChildren">
                                <ChargeCardList @bind-Child="@chargeObject"
                                                Charges="@_search.GetCharges()"
                                                chargesActiveCounts="@activeChargesCounts"
                                                chargesInactiveCounts="@inactiveChargesCounts"
                                                ParentStateChanged="@StateChanged"></ChargeCardList>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        }
        else
        {
            <!-- Charge Table View-->
            <CascadingValue Name="Categories" Value="@categories">
                <CascadingValue Name="Priorities" Value="@priorities">
                    <CascadingValue Name="Statuses" Value="@statuses">
                        <CascadingValue Name="SearchText" Value="@searchText">
                            <CascadingValue Name="ShowChildren" Value="@showChargeCardChildren">
                                <ChargeTable @bind-Child="@chargeObject"
                                             @ref="@chargeTable"
                                             Charges="@_search.GetCharges()"
                                             ChargeChildrenCounts="@chargeChildrenCounts"
                                             ParentStateChanged="@StateChanged"></ChargeTable>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        }

    </div>
    <!-- Modals -->
    <ChargeDetailModal @ref="@chargeDetailModal"
                       Charge="@chargeObject"
                       Categories="@categories"
                       Priorities="@priorities"
                       Statuses="@statuses"
                       ParentStateChanged="@StateChanged"></ChargeDetailModal>

    <ChargeChildrenWarningModal Charge="@_chargeOpenChildrenModalHelper.Charge"
                                CompletedOpenChildren="@CompleteChargeWithChildren"
                                OpenChildren="@_chargeOpenChildrenModalHelper.OpenChildren"></ChargeChildrenWarningModal>

    <BatteryDetailExisting_CategoryOptionsModal Battery="@battery" Categories="@categories" ParentStateChanged="@StateChanged"></BatteryDetailExisting_CategoryOptionsModal>
    <BatteryDetailExisting_PriorityOptionsModal Battery="@battery" Priorities="@priorities" ParentStateChanged="@StateChanged"></BatteryDetailExisting_PriorityOptionsModal>
    <BatteryDetailExisting_StatusOptionsModal Battery="@battery" Statuses="@statuses" ParentStateChanged="@StateChanged"></BatteryDetailExisting_StatusOptionsModal>

    <DeleteBatteryModal Battery="@battery"
                        ChargesCount="@allChargesCount"
                        CategoriesCount="@categories.Count"
                        PrioritiesCount="@priorities.Count"
                        StatusesCount="@statuses.Count"></DeleteBatteryModal>

    <ManageTagsModal Battery="@battery"
                     Tags="@tags"
                     TagActiveCounts="@tagActiveCounts"
                     TagAllCounts="@tagAllCounts"
                     ParentStateChanged="@TagsChanged"></ManageTagsModal>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private Battery battery = new();
    private Charge chargeObject = new Charge();

    private List<Category> categories = new();
    private List<Charge> charges = new();
    private List<Charge> chargeObjectChildren = new();
    private List<ChargeChildrenCount> chargeChildrenCounts = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();
    private List<Tag> tags = new();
    //private PaginatedList<Charge> paginatedCharges = new();

    private ChargeDetailModal chargeDetailModal;
    private ChargeTable chargeTable;

    private Dictionary<int, int> activeChargesCounts = new();
    private Dictionary<int, int> inactiveChargesCounts = new();
    private Dictionary<int, int> tagActiveCounts = new();
    private Dictionary<int, int> tagAllCounts = new();

    private bool showChargeCardChildren = false;
    private bool showChargeCardView = true;
    private bool showPriorityScoreCard = false;
    private bool showStatusScoreCard = false;

    private int allChargesCount;
    private int minTextareaRows = 4;
    private int maxTextareaRows = 8;
    private int textareaRows;

    private string btnActive = "btn-secondary";
    private string btnInactive = "btn-outline-secondary";
    private string btnClassActiveCharges;
    private string btnClassAllCharges;
    private string btnClassChargeCardView;
    private string btnClassChargeTableView;
    private string dateTimeFormat;
    private string searchText = "";
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Get User Profile
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        // Get Battery
        battery = await _batteryService.GetAsync(Id);

        RedirectUnAuthUser();

        // Get entities
        categories = await _categoryService.GetAsync(battery);
        charges = await _chargeService.GetActiveAsync(battery);
        priorities = await _priorityService.Get(battery);
        statuses = await _statusService.Get(battery);
        tags = await _tagService.Get(battery);

        // Calculate counts
        await GetChargeCounts();
        await GetTagCounts();

        // Initialize search entities
        _search.Initialize(battery);
        _search.Initialize(charges);
        await InitializeChargeChildren();
        await InitializeTagSearch();

        // Set filter button bootstrap classes
        btnClassActiveCharges = btnActive;
        btnClassAllCharges = btnInactive;
        btnClassChargeCardView = btnActive;
        btnClassChargeTableView = btnInactive;

        // Get DateTime format from appsettings.json
        dateTimeFormat = _configuration["Configurations:DateTimeFormat"];

        // Set battery description rows
        textareaRows = _calcTextareaRows.CalculateRows(battery.Description, minTextareaRows, maxTextareaRows);

        // Hide the breadcrump nav
        _breadcrumb.Hide();
    }

    private void RedirectUnAuthUser()
    {
        if (userId != battery.OwnerId)
        {
            _navManager.NavigateTo("/");
        }
    }

    private async Task InitializeChargeChildren()
    {
        foreach (var charge in charges)
        {
            var children = await _chargeService.GetChildrenAsync(charge);
            _search.AddChargeChildren(charge, children);
        }
    }

    private async void InitializeChargeObject()
    {
        chargeObject = new Charge();
        chargeObject = await _chargeLifecycle.SetDefaultValuesAsync(battery, chargeObject);
        chargeDetailModal.StateChanged();
    }

    private async Task InitializeTagSearch()
    {
        var relations = await _tagController.GetAllRelationsForBattery(battery);

        _search.Initialize(relations);
    }

    private async void StateChanged()
    {
        GetOptions();

        if (btnClassActiveCharges == btnActive)
        {
            await GetActiveCharges();
        }
        else
        {
            await GetAllCharges();
        }

        StateHasChanged();
    }

    private void SetChargObject(Charge charge)
    {
        chargeObject = charge;
    }

    private void ResizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value, minTextareaRows, maxTextareaRows);
    }

    private async void HandleValidSubmit()
    {
        await _batteryService.UpdateAsync(battery);
        StateHasChanged();
    }

    private void TogglePriorityScoreCard()
    {
        showPriorityScoreCard = !showPriorityScoreCard;
    }

    private void ToggleStatusScoreCard()
    {
        showStatusScoreCard = !showStatusScoreCard;
    }

    private void ClearSearch()
    {
        searchText = "";
        showChargeCardChildren = false;
        _search.Clear();
        StateHasChanged();
    }

    private void Search(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();

        _search.SearchCharges(searchText);
        _search.SearchChildren(searchText);

        showChargeCardChildren = true;
    }

    private void SearchTags(Tag tag)
    {
        if (tag == _search.GetTag())
        {
            ClearSearch();
            return;
        }

        _search.Search(tag);

        showChargeCardChildren = true;

        StateHasChanged();
    }

    private async Task GetAllCharges()
    {
        charges = await _chargeService.GetAsync(battery);
        await GetCharges();
    }

    private async Task GetActiveCharges()
    {
        charges = await _chargeService.GetActiveAsync(battery);
        await GetCharges();
    }

    private async Task GetCharges()
    {
        await GetChargeCounts();
        _search.Initialize(charges);
        await InitializeChargeChildren();
        _search.SearchCharges(searchText);
        _search.SearchChildren(searchText);
        chargeTable?.ResetSort();

        StateHasChanged();
    }

    private async void GetOptions()
    {
        categories = await _categoryService.GetAsync(battery);
        priorities = await _priorityService.Get(battery);
        statuses = await _statusService.Get(battery);
    }

    private async void SetActiveChargesFilter()
    {
        btnClassActiveCharges = btnActive;
        btnClassAllCharges = btnInactive;

        await GetActiveCharges();
    }

    private async void SetAllChargesFilter()
    {
        btnClassActiveCharges = btnInactive;
        btnClassAllCharges = btnActive;

        await GetAllCharges();
    }

    private void ShowChargeCardView()
    {
        showChargeCardView = true;
        btnClassChargeCardView = btnActive;
        btnClassChargeTableView = btnInactive;

        ResetChargeCardViewParameters();

        StateHasChanged();
    }

    private void ShowChargeTableView()
    {
        showChargeCardView = false;
        btnClassChargeCardView = btnInactive;
        btnClassChargeTableView = btnActive;

        ResetChargeCardViewParameters();

        StateHasChanged();
    }

    private void ResetChargeCardViewParameters()
    {
        chargeObject = new Charge();
        showChargeCardChildren = !string.IsNullOrWhiteSpace(searchText);
    }

    private async void CompleteChargeWithChildren()
    {
        var charge = _chargeOpenChildrenModalHelper.Charge;
        var completeStatus = await _statusService.GetCompletedStatus(battery.Id);
        charge.StatusId = completeStatus.Id;
        await _chargeService.UpdateAsync(charge);

        StateChanged();
    }

    private async Task GetChargeCounts()
    {
        chargeChildrenCounts = await _chargeCountService.GetChildrenCountAsync(charges);
        allChargesCount = await _chargeCountService.GetAllCountAsync(battery);
        activeChargesCounts = await _chargeCountService.GetActiveCountsByStatusAsync(battery);
        inactiveChargesCounts = await _chargeCountService.GetInactiveCountsByStatusAsync(battery);
    }

    private async Task SetManageTagsBattery(int batteryId)
    {
        await GetTagCounts();
    }

    private async void TagsChanged()
    {
        tags = await _tagService.Get(userId);
        StateHasChanged();
    }

    private async Task GetTagCounts()
    {
        tagActiveCounts = await _tagController.CountActiveChargeTagRelationshipsAsync(battery);
        tagAllCounts = await _tagController.CountAllChargeTagRelationshipsAsync(battery);
    }
}
