@page "/battery/{id:int}"

@inject AuthenticationStateProvider _authStateProvider
@inject IConfiguration _configuration

@inject IBatteryService _batteryService
@inject IBreadcrumbManager _breadcrumb
@inject ICalculateTextareaRows _calcTextareaRows
@inject ICategoryService _categoryService
@inject IChargeLifecycle _chargeLifecycle
@inject IChargeService _chargeService
@inject IPriorityService _priorityService
@inject IStatusService _statusService
@inject IJSRuntime _jsRuntime

<AuthorizeView Context="authContext">
    <Authorized>
        @if (charges == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="small mt-4">
                <EditForm Context="formContext" Model="battery" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <!-- Battery Details -->
                    <div class="row mb-3">
                        <div class="col-lg-12">
                            <div class="card border-square shadow-sm p-2">
                                <div class="row">
                                    <div class="col-lg-10">
                                        <div class="form-group row px-4">
                                            <label for="battery-name-input" class="col-sm-1 col-form-label pr-0" style="font-size: 1.5rem">
                                                <span class="oi oi-battery-full" style="color: steelblue"></span>
                                                @battery.Id
                                            </label>
                                            <div class="col-sm-11 p-0">
                                                <InputText @bind-Value="@battery.Name" id="battery-name-input" class="form-control transparent-input strong-input-text" />
                                                <ValidationMessage For="@(() => battery.Name)" />
                                            </div>
                                        </div>
                                        <div class="row px-4">
                                            <div class="col-sm-8">
                                                <InputTextArea @bind-Value="@battery.Description" @oninput="@(e => ResizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control form-control-sm">@battery.Description</InputTextArea>
                                                <ValidationMessage For="@(() => battery.Description)" />
                                            </div>
                                            <div class="col-sm-4">
                                                <div class="form-group row mb-2">
                                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="created-input">Created: </label>
                                                    <div class="col">
                                                        <input type="text" value="@battery.Created.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="created-input" readonly />
                                                    </div>
                                                </div>
                                                <div class="form-group row mb-2">
                                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="updated-input">Updated:</label>
                                                    <div class="col">
                                                        <input type="text" value="@battery.Updated.ToLocalTime().ToString(dateTimeFormat)" class="form-control form-control-sm" id="updated-input" readonly />
                                                    </div>
                                                </div>
                                                <div class="form-group row mb-2">
                                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="battery-actvie-input">Active:</label>
                                                    <div class="col">
                                                        <InputCheckbox @bind-Value="@battery.IsActive" class="form-control form-control-sm form-check-inline" />
                                                        <ValidationMessage For="@(() => battery.IsActive)" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2">
                                        <button type="submit" class="btn btn-block btn-primary px-4 border-square"><strong>Save</strong></button>
                                        <button data-toggle="modal" data-target="#chargeModal" class="btn btn-block btn-success px-4 border-square" value="Add Charge" @onclick="(() => InitializeChargeObject())"><strong>Add Charge</strong></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
                <!-- Status and Priority Score Cards -->
                @*<div class="row mb-3">
                        <div class="col-lg-6">
                            <div class="card border-square shadow-sm px-2 pt-2 pb-0">
                                <div class="row mb-2">
                                    <div class="col-lg-12">
                                        <a class="link-black" role="button" href="" @onclick="@ToggleStatusScoreCard" @onclick:preventDefault="true">
                                            <h6>
                                                @if (showStatusScoreCard)
                                                {
                                                    <span class="oi oi-caret-bottom"></span>

                                                }
                                                else
                                                {
                                                    <span class="oi oi-caret-right"></span>
                                                }
                                                Status
                                            </h6>
                                        </a>
                                    </div>
                                </div>
                                @if (showStatusScoreCard)
                                {
                                    @foreach (var status in statuses.OrderBy(x => x.Order))
                                    {
                                        <div class="row mb-2">
                                            <div class="col-lg-3 pl-4 d-flex align-items-center">
                                                <p class="text-center">@status.Name</p>
                                            </div>
                                            <div class="col-lg-9">
                                                <div class="card-deck px-2">
                                                    @foreach (var category in categories)
                                                    {
                                                        <CategoryCardCount Category="@category"
                                                                           Count="charges.Where(x => x.CategoryId == category.Id && x.StatusId == status.Id).Count()"
                                                                           FilterCharges="FilterChargesByStatus"
                                                                           FilterId="@status.Id"></CategoryCardCount>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }

                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="card border-square shadow-sm px-2 pt-2 pb-0">
                                <div class="row mb-2">
                                    <div class="col-lg-12">
                                        <a class="link-black" role="button" href="" @onclick="@TogglePriorityScoreCard" @onclick:preventDefault="true">
                                            <h6>
                                                @if (showPriorityScoreCard)
                                                {
                                                    <span class="oi oi-caret-bottom"></span>

                                                }
                                                else
                                                {
                                                    <span class="oi oi-caret-right"></span>
                                                }
                                                Priority
                                            </h6>
                                        </a>
                                    </div>
                                </div>
                                @if (showPriorityScoreCard)
                                {
                                    @foreach (var priority in priorities.OrderBy(x => x.Severity))
                                    {
                                        <div class="row mb-2">
                                            <div class="col-lg-3 pl-4">
                                                <p class="align-self-center">@priority.DisplayName</p>
                                            </div>
                                            <div class="col-lg-9">
                                                <div class="card-deck px-2">
                                                    @foreach (var category in categories)
                                                    {
                                                        <CategoryCardCount Category="@category"
                                                                           Count="charges.Where(x => x.CategoryId == category.Id && x.PriorityId == priority.Id).Count()"></CategoryCardCount>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>*@
                <!-- Search -->
                <div class="row mb-3">
                    <div class="col-lg-12">
                        <div class="card border-square shadow-sm p-2">
                            <div class="row justify-content-center">
                                <div class="col-lg-3">
                                    <BtnGroup_TwoButtons BtnOneClass="@btnClassActiveCharges"
                                                         BtnOneText="Active"
                                                         BtnOneAction="@SetActiveChargesFilter"
                                                         BtnTwoClass="@btnClassAllCharges"
                                                         BtnTwoText="All"
                                                         BtnTwoAction="@SetAllChargesFilter"
                                                         QuestionToolTipAlignment="Center"
                                                         QuestionToolTipText="Toggle between Active Items (Open items or items completed within the last 3 days) and All Items"></BtnGroup_TwoButtons>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text border-0 bg-transparent mr-n5">
                                                <span class="oi oi-magnifying-glass"></span>
                                            </div>
                                        </div>
                                        <input type="text"
                                               class="form-control py-2 border-square bg-transparent pl-5"
                                               id="searchChargesInput"
                                               placeholder="Search"
                                               value="@searchText"
                                               @oninput="@(e => FilterChargesBySearch(e))" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-outline-info border-square" @onclick="@ClearSearch">Clear</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="float-right">
                                        <BtnGroup_TwoButtons BtnOneClass="@btnClassChargeCardView"
                                                             BtnOneText="Card View"
                                                             BtnOneAction="@ShowChargeCardView"
                                                             BtnTwoClass="@btnClassChargeTableView"
                                                             BtnTwoText="Table View"
                                                             BtnTwoAction="@ShowChargeTableView"
                                                             QuestionToolTipAlignment="Right"
                                                             QuestionToolTipText="Toggle between displaying Charges in lanes with cards or in a table."></BtnGroup_TwoButtons>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (showChargeCardView)
                {
                    <!-- Charge Item List by Status -->
                    <CascadingValue Name="Categories" Value="@categories">
                        <CascadingValue Name="Priorities" Value="@priorities">
                            <CascadingValue Name="Statuses" Value="@statuses">
                                <CascadingValue Name="SearchText" Value="@searchText">
                                    <CascadingValue Name="ShowChildren" Value="@showChargeCardChildren">
                                        <ChargeCardList @bind-Child="@chargeObject"
                                                        Charges="@filteredCharges" 
                                                        ParentStateChanged="@StateChanged"></ChargeCardList>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                }
                else
                {
                    <!-- Charge Table View-->
                    <CascadingValue Name="Categories" Value="@categories">
                        <CascadingValue Name="Priorities" Value="@priorities">
                            <CascadingValue Name="Statuses" Value="@statuses">
                                <CascadingValue Name="SearchText" Value="@searchText">
                                    <CascadingValue Name="ShowChildren" Value="@showChargeCardChildren">
                                        <ChargeTable @bind-Child="@chargeObject"
                                                     Charges="@filteredCharges" 
                                                     ChargeChildrenCounts="@chargeChildrenCounts"
                                                     ParentStateChanged="@StateChanged"></ChargeTable>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                }

            </div>

            <ChargeDetailModal Charge="@chargeObject" ParentStateChanged="@StateChanged"></ChargeDetailModal>

            @*<ConfirmDeleteDialog Charge="@chargeObject" Delete="@DeleteCharge"></ConfirmDeleteDialog>*@
        }
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    private Battery battery = new();
    private Charge chargeObject = new Charge();
    private List<Category> categories = new();
    private List<Charge> charges = new();
    private List<Charge> filteredCharges = new();
    private List<ChargeChildrenCount> chargeChildrenCounts = new();
    private List<Priority> priorities = new();
    private List<Status> statuses = new();
    //private PaginatedList<Charge> paginatedCharges = new();

    private bool showChargeCardChildren = false;
    private bool showChargeCardView = true;
    private bool showPriorityScoreCard = false;
    private bool showStatusScoreCard = false;

    private int minTextareaRows = 4;
    private int maxTextareaRows = 8;
    private int textareaRows;

    private string btnActive = "btn-secondary";
    private string btnInactive = "btn-outline-secondary";
    private string btnClassActiveCharges;
    private string btnClassAllCharges;
    private string btnClassChargeCardView;
    private string btnClassChargeTableView;
    private string dateTimeFormat;
    private string searchText = "";
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Get User Profile
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        // Get entities
        battery = await _batteryService.Get(Id);
        categories = await _categoryService.Get(userId);
        charges = await _chargeService.GetActive(battery);
        chargeChildrenCounts = await _chargeService.GetChildrenCount(charges);
        priorities = await _priorityService.Get(userId);
        statuses = await _statusService.Get();

        // Set filtered charge list
        filteredCharges = charges;

        // Set filter button bootstrap classes
        btnClassActiveCharges = btnActive;
        btnClassAllCharges = btnInactive;
        btnClassChargeCardView = btnActive;
        btnClassChargeTableView = btnInactive;

        // Get DateTime format from appsettings.json
        dateTimeFormat = _configuration["Configurations:DateTimeFormat"];

        // Set battery description rows
        textareaRows = _calcTextareaRows.CalculateRows(battery.Description, minTextareaRows, maxTextareaRows);

        // Hide the breadcrump nav
        _breadcrumb.Hide();
    }

    private async void InitializeChargeObject()
    {
        chargeObject = new Charge();
        chargeObject = await _chargeLifecycle.SetDefaultValuesAsync(battery, chargeObject);
    }

    private async void StateChanged()
    {
        if (btnClassActiveCharges == btnActive)
        {
            await GetActiveCharges();
        }
        else
        {
            await GetAllCharges();
        }

        StateHasChanged();
    }

    private void SetChargObject(Charge charge)
    {
        chargeObject = charge;
    }

    private void ResizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value, minTextareaRows, maxTextareaRows);
    }

    private async void HandleValidSubmit()
    {
        await _batteryService.Update(battery);
        StateHasChanged();
    }

    private void TogglePriorityScoreCard()
    {
        showPriorityScoreCard = !showPriorityScoreCard;
    }

    private void ToggleStatusScoreCard()
    {
        showStatusScoreCard = !showStatusScoreCard;
    }

    private void FilterChargesBySearch(ChangeEventArgs e)
    {

        searchText = e.Value.ToString();
        filteredCharges = charges.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList();

        var children = charges.Where(x => x.ParentId is not null).ToList();

        foreach (var charge in charges)
        {
            var filterChildren = children.Where(x => x.Title.ToLower().Contains(searchText.ToLower()) && x.ParentId == charge.Id).ToList();

            if (filterChildren?.Count > 0 && !filteredCharges.Contains(charge))
            {
                filteredCharges.Add(charge);
            }
        }

        showChargeCardChildren = true;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchText = "";
        showChargeCardChildren = false;
        filteredCharges = charges;
        StateHasChanged();
    }

    private async Task GetAllCharges()
    {
        charges = await _chargeService.Get(battery);
        chargeChildrenCounts = await _chargeService.GetChildrenCount(charges);
        filteredCharges = charges.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList();

        StateHasChanged();
    }

    private async Task GetActiveCharges()
    {
        charges = await _chargeService.GetActive(battery);
        chargeChildrenCounts = await _chargeService.GetChildrenCount(charges);
        filteredCharges = charges.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList();

        StateHasChanged();
    }

    private async void SetActiveChargesFilter()
    {
        btnClassActiveCharges = btnActive;
        btnClassAllCharges = btnInactive;

        await GetActiveCharges();
    }

    private async void SetAllChargesFilter()
    {
        btnClassActiveCharges = btnInactive;
        btnClassAllCharges = btnActive;

        await GetAllCharges();
    }

    private void ShowChargeCardView()
    {
        showChargeCardView = true;
        btnClassChargeCardView = btnActive;
        btnClassChargeTableView = btnInactive;

        ResetChargeCardViewParameters();

        StateHasChanged();
    }

    private void ShowChargeTableView()
    {
        showChargeCardView = false;
        btnClassChargeCardView = btnInactive;
        btnClassChargeTableView = btnActive;

        ResetChargeCardViewParameters();

        StateHasChanged();
    }

    private void ResetChargeCardViewParameters()
    {
        chargeObject = new Charge();
        showChargeCardChildren = !string.IsNullOrWhiteSpace(searchText);
    }

}
