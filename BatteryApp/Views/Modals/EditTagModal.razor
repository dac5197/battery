@inject IJSRuntime _jsRuntime
@inject ITagService _tagService

<div class="modal fade" tabindex="-1" role="dialog" id="editTagModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title">Edit Tag</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Tag" OnValidSubmit="@HandleValidSubmit" class="form-inline">
                    <DataAnnotationsValidator />
                    <label for="tag-name mx-1">Tag Name</label>
                    <InputText @bind-Value="@Tag.Name" id="tag-name" class="form-control mx-1" />
                    <ValidationMessage For="@(() => Tag.Name)" />
                    <button type="submit" class="btn btn-primary mx-1">Submit</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Tag Tag { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private async void HandleValidSubmit()
    {
        await _tagService.Update(Tag);
        
        await CloseModal();

        ParentStateChanged?.Invoke();
    }

    private async Task CloseModal()
    {
        await _jsRuntime.InvokeAsync<object>("CloseModal", "editTagModal");
    }
}
