@inject ITagService _tagService
@inject ITagValidator _tagValidator

@inject IJSRuntime _jsRuntime

<div class="modal modal-child fade" tabindex="-1" role="dialog" id="editTagModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-square">
            <div class="modal-header">
                <h6 class="modal-title">Edit Tag</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@ClearErrors">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Tag" OnValidSubmit="@HandleValidSubmitAsync" class="form-inline border-square">
                    <DataAnnotationsValidator />
                    @if (showErrors)
                    {
                        <CustomFormErrors Errors="@errors" />
                    }
                    <label for="tag-name mx-1">Tag Name</label>
                    <InputText @bind-Value="@Tag.Name" id="tag-name" class="form-control border-square mx-1" />
                    <ValidationMessage For="@(() => Tag.Name)" />
                    <button type="submit" class="btn btn-primary border-square mx-1">Submit</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Battery Battery { get; set; }

    [Parameter]
    public Tag Tag { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private Dictionary<string, List<string>> errors = new();

    private bool showErrors = false;

    private string tagName;

    protected override void OnParametersSet()
    {
        tagName = Tag.Name;
    }

    private async void HandleValidSubmitAsync()
    {
        showErrors = false;
        errors.Clear();
        ClearErrors();

        if (Tag.Name == tagName)
        {
            ClearErrors();
            await CloseModalAsync();
        }
        else
        {
            errors = await _tagValidator.ValidateAsync(Tag, Battery);

            if (errors.Count() > 0)
            {
                showErrors = true;
                StateHasChanged();
            }
            else
            {
                await _tagService.UpdateAsync(Tag);

                await CloseModalAsync();

                ParentStateChanged?.Invoke();
            }
        }
    }

    private async Task CloseModalAsync()
    {
        await _jsRuntime.InvokeAsync<object>("CloseModal", "editTagModal");
    }

    private void ClearErrors()
    {
        _tagValidator.ClearErrors();
    }
}
