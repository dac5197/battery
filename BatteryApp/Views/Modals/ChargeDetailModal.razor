@inject ICalculateTextareaRows _calcTextareaRows
@inject IChargeService _chargeService
@inject IStatusService _statusService
@inject IJSRuntime _jsRuntime

<div class="modal fade" tabindex="-1" role="dialog" id="chargeModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Charge Detail</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Charge" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <InputText @bind-Value="@Charge.Title" id="title" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="desc">Description</label>
                        <InputTextArea @bind-Value="@Charge.Description" @oninput="@(e => resizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control">@Charge.Description</InputTextArea>
                    </div>
                    <br />
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private int textareaRows;

    private async void HandleValidSubmit()
    {
        if (Charge.Id == 0)
        {
            await _chargeService.Add(Charge);
        }
        else
        {
            await _chargeService.Update(Charge);
        }

        await CloseModal();
        ParentStateChanged?.Invoke();
    }

    private void resizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value);
    }

    private async Task CloseModal()
    {
        await _jsRuntime.InvokeAsync<object>("CloseModal", "chargeModal");
    }
}
