@inject ICalculateTextareaRows _calcTextareaRows
@inject IChargeService _chargeService
@inject IJSRuntime _jsRuntime

<div class="modal fade" tabindex="-1" role="dialog" id="chargeModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Charge</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Charge" OnValidSubmit="@HandleValidSubmit">
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="title">Title</label>
                                <InputText @bind-Value="@Charge.Title" id="title" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="desc">Description</label>
                                <InputTextArea @bind-Value="@Charge.Description" @oninput="@(e => resizeTextarea(e))" rows="@textareaRows" id="desc" class="form-control">@Charge.Description</InputTextArea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <a class="link-black" role="button" href="" @onclick="@ToggleAdvancedOptions" @onclick:preventDefault="true">
                                <p>
                                    @if (showAdvancedOptions)
                                    {
                                        <span class="oi oi-caret-bottom"></span>

                                    }
                                    else
                                    {
                                        <span class="oi oi-caret-right"></span>
                                    }
                                    Advanced Options
                                </p>
                            </a>
                        </div>
                    </div>
                    <div class="row px-5">
                        <div class="col">
                            @if (showAdvancedOptions)
                            {
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="status-input">Status</label>
                                    <div class="col">
                                        <InputSelect @bind-Value="@Charge.StatusId" class="form-control form-control-sm" id="status-input">
                                            @foreach (var status in Statuses)
                                                {
                                                <option Value="@status.Id"> @status.Name</option>
                                                }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => Charge.StatusId)" />
                                    </div>
                                </div>
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="priority-input">Priority</label>
                                    <div class="col">
                                        <InputSelect @bind-Value="@Charge.PriorityId" class="form-control form-control-sm" id="priority-input">
                                            @foreach (var priority in Priorities)
                                                {
                                                <option Value="@priority.Id"> @priority.Name</option>
                                                }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => Charge.PriorityId)" />
                                    </div>
                                </div>
                                <div class="form-group row mb-2">
                                    <label class="col-form-label col-form-label-sm align-items-center w-10ch" for="priority-input">Category</label>
                                    <div class="col">
                                        <InputSelect @bind-Value="@Charge.CategoryId" class="form-control form-control-sm" id="category-input">
                                            @foreach (var category in Categories.OrderBy(x => x.Name))
                                                {
                                                <option Value="@category.Id"> @category.Name</option>
                                                }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => Charge.CategoryId)" />
                                    </div>
                                </div>
                        }
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col">
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public List<Category> Categories { get; set; }

    [Parameter]
    public List<Priority> Priorities { get; set; }

    [Parameter]
    public List<Status> Statuses { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private bool showAdvancedOptions = false;

    private int textareaRows;

    public void StateChanged()
    {
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        if (Charge.Id == 0)
        {
            await _chargeService.Add(Charge);
        }
        else
        {
            await _chargeService.Update(Charge);
        }

        await CloseModal();
        ParentStateChanged?.Invoke();
    }

    private void resizeTextarea(ChangeEventArgs e)
    {
        textareaRows = _calcTextareaRows.CalculateRows((string)e.Value);
    }

    private async Task CloseModal()
    {
        showAdvancedOptions = false;
        await _jsRuntime.InvokeAsync<object>("CloseModal", "chargeModal");
    }

    private void ToggleAdvancedOptions()
    {
        showAdvancedOptions = !showAdvancedOptions;
    }
}
