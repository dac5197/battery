@using Microsoft.AspNetCore.Identity;
@inject RoleManager<IdentityRole> _RoleManager
@inject IJSRuntime _jsRuntime

<div class="modal fade" tabindex="-1" role="dialog" id="identityRoleModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-square">
            <div class="modal-header">
                <h5 class="modal-title">Identity Role Detail</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HandleClose">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">

                    @if (showErrors)
                    {
                        <CustomFormErrors Errors="@errors" />
                    }
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="title">Name</label>
                                <input @bind-value="@RoleName" id="title" class="form-control border-square" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col">
                            <button type="submit" class="btn btn-primary border-square" @onclick="@HandleValidSubmit">Submit</button>
                            <button type="button" class="btn btn-secondary border-square" data-dismiss="modal" @onclick="HandleClose">Cancel</button>
                        </div>
                    </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IdentityRole Role { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    [Parameter]
    public string RoleName { get; set; }

    private Dictionary<string, List<string>> errors = new();

    private bool showErrors = false;


    private async void HandleValidSubmit()
    {
        ClearErrors();

        ValidateRole();

        if (errors.Count() > 0)
        {
            showErrors = true;
        }
        else
        {
            var isRoleNew = await IsRoleNew();

            Role.Name = RoleName;

            if (isRoleNew)
            {
                await _RoleManager.CreateAsync(Role);
            }
            else
            {
                await _RoleManager.UpdateAsync(Role);
            }
            await CloseModal();
            ParentStateChanged.Invoke();
        }

    }

    private async Task<bool> IsRoleNew()
    {
        var roleResult = await _RoleManager.FindByIdAsync(Role.Id);

        if (roleResult is null)
        {
            return true;
        }

        return false;
    }

    private async Task CloseModal()
    {

        await _jsRuntime.InvokeAsync<object>("CloseModal", "identityRoleModal");
    }

    private void ValidateRole()
    {
        string key = "Role";
        List<string> messages = new();

        if (String.IsNullOrWhiteSpace(RoleName))
        {
            messages.Add("Name is empty.  Please enter a Role name.");
            errors.Add(key, messages);
        }

    }

    private void ClearErrors()
    {
        showErrors = false;
        errors = new();
    }

    private void HandleClose()
    {
        ClearErrors();
        ParentStateChanged.Invoke();
    }
}
