@using Microsoft.AspNetCore.Identity;
@inject RoleManager<IdentityRole> _RoleManager
@inject IJSRuntime _jsRuntime

<div class="modal fade" tabindex="-1" role="dialog" id="identityRoleModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-square">
            <div class="modal-header">
                <h5 class="modal-title">Identity Role Detail</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Role" OnValidSubmit="@HandleValidSubmit">
                    <div class="row">
                        <div class="col">
                            <p>@Role.Id</p>
                            <div class="form-group">
                                <label for="title">Name</label>
                                <InputText @bind-Value="@Role.Name" id="title" class="form-control border-square" />
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="col">
                            <button type="submit" class="btn btn-primary border-square">Submit</button>
                            <button type="button" class="btn btn-secondary border-square" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IdentityRole Role { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private async void HandleValidSubmit()
    {
        var isRoleNew = await IsRoleNew();

        if (isRoleNew)
        {
            await _RoleManager.CreateAsync(Role);
        }
        else
        {

        }
        await CloseModal();
        ParentStateChanged.Invoke();
    }

    private async Task<bool> IsRoleNew()
    {
        var roleResult = await _RoleManager.FindByIdAsync(Role.Id);

        if (roleResult is null)
        {
            return true;
        }

        return false;
    }

    private async Task CloseModal()
    {
        await _jsRuntime.InvokeAsync<object>("CloseModal", "identityRoleModal");
    }
}
