@inject ITagController _tagController
@inject ITagService _tagService
@inject ITagValidator _tagValidator

@inject IJSRuntime _jsRuntime

<div class="modal modal-child fade" tabindex="-1" role="dialog" id="addTagModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-square">
            <div class="modal-header">
                <h6 class="modal-title">Add Tag</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@ClearErrors">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@tag" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    @if (showErrors)
                    {
                        <CustomFormErrors Errors="@errors" />
                    }
                    <label for="tag-name mx-1">Tag Name</label>
                    <InputText @bind-Value="@tag.Name" @oninput="@(e => FilterTags(e))" id="tag-name" class="form-control border-square mx-1" />
                    <button type="submit" class="btn btn-primary mx-1 my-2 border-square">Submit</button>
                </EditForm>
                <br />
                <label>Existing Tags</label>
                <br />
                @foreach (var tag in filteredTags)
                {

                    <div class="badge tag-badge existing-tag border-square m-1" @onclick="@(() => AddExistingTag(tag))">
                        @tag.Name
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .existing-tag {
        cursor: pointer;
    }

    .existing-tag:hover {
        outline: #b3d6ff;
        outline-style: solid;
    }
</style>

@code {
    [Parameter]
    public Battery Battery { get; set; }

    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    [Parameter]
    public List<Tag> Tags { get; set; }

    private Tag tag = new();
    private List<Tag> filteredTags = new();

    private Dictionary<string, List<string>> errors = new();

    private bool showErrors = false;

    private string nameInput;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        {
            filteredTags = new(Tags);
        }
    }

    private async void HandleValidSubmit()
    {
        showErrors = false;
        errors.Clear();
        ClearErrors();
        errors = await _tagValidator.ValidateAsync(tag, Battery);

        if (errors.Count() > 0)
        {
            showErrors = true;
            StateHasChanged();
        }
        else
        {
            // Process the form
            if (Charge is not null)
            {
                tag = _tagController.SetDefaults(Charge, tag);
                await _tagController.AddTagFromChargeAsync(Charge.Id, tag);
            }
            else
            {
                tag = _tagController.SetDefaults(Battery, tag);
                await _tagService.Add(tag);
            }

            tag = new();
            await CloseModal();
        }


    }

    private async void AddExistingTag(Tag existingTag)
    {
        ClearErrors();
        await _tagController.AddRelationshipAsync(Charge.Id, existingTag);
        await CloseModal();
    }

    private async Task CloseModal()
    {
        ClearErrors();
        await _jsRuntime.InvokeAsync<object>("CloseModal", "addTagModal");
        ParentStateChanged?.Invoke();
    }

    private void FilterTags(ChangeEventArgs e)
    {
        nameInput = e.Value.ToString();
        filteredTags = Tags.Where(x => x.Name.ToLower().Contains(nameInput.ToLower())).ToList();
    }

    private void ClearErrors()
    {
        _tagValidator.ClearErrors();
    }
}
