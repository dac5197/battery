@inject IChargeService _chargeService
@inject ITagController _tagController

<div class="card border-square shadow-sm p-2 mt-1 highlighted-index-@Charge.BatteryId-@Charge.Id  @(Charge.StatusId == CompleteStatus.Id ? "bg-completed" : "")">
    <div class="row @(Charge.StatusId == CompleteStatus.Id ? "completed" : "")">
        <div class="col-lg-6">
            <NavLink href="@($"/charge/{Charge.Id}")" class="link-black">
                <IconCategory Category="@Category"></IconCategory>
                @Charge.Id | @Charge.Title
            </NavLink>
        </div>
        <div class="col-lg-2">
            <SpanDisplay BgColor="@Priority.BgColor"
                         FontColor="@Priority.FontColor"
                         Text="@Priority.DisplayName"
                         Width="@PriorityDispalyWidth"></SpanDisplay>
        </div>
        <div class="col-lg-2">
            <SpanDisplay BgColor="@Status.BgColor"
                         FontColor="@Status.FontColor"
                         Text="@Status.Name"
                         Width="@StatusDispalyWidth"></SpanDisplay>
        </div>
        <div class="col-lg-2">
            <BtnToggleChargeChildren Categories="@Categories"
                                     Children="@children"
                                     CompleteStatus="CompleteStatus"
                                     ToggleShowChildren="ToggleShowChildren"></BtnToggleChargeChildren>
        </div>
    </div>
    @if (ShowTags && tags.Any())
    {
        <div class="row mt-1">
            <div class="col-lg-12">
                <IndexTagList_Charge Tags="@tags"></IndexTagList_Charge>
            </div>
        </div>
    }

    @if (ShowChildren)
    {
        <div class="row mt-1">
            <div class="col-lg-12">
                @foreach (var child in children.Where(x => x.Title.ToLower().Contains(SearchText.ToLower())).ToList())
                {
                    <div class="card border-0 border-square bg-light p-2 @(child.StatusId == CompleteStatus.Id ? "completed" : "")">
                        <div class="row">
                            <div class="col-lg-6">
                                <NavLink href="@($"/charge/{child.Id}")" class="link-black">
                                    <IconCategory Category="@Categories.Where(x => x.Id == child.CategoryId).FirstOrDefault()"></IconCategory>
                                    @child.Id | @child.Title
                                </NavLink>
                            </div>
                            <div class="col-lg-2">
                                <SpanDisplay BgColor="@Priorities.Where(x => x.Id == child.PriorityId).FirstOrDefault().BgColor"
                                             FontColor="@Priorities.Where(x => x.Id == child.PriorityId).FirstOrDefault().FontColor"
                                             Text="@Priorities.Where(x => x.Id == child.PriorityId).FirstOrDefault().DisplayName"
                                             Width="@PriorityDispalyWidth"></SpanDisplay>
                            </div>
                            <div class="col-lg-2">
                                <SpanDisplay BgColor="@Statuses.Where(x => x.Id == child.StatusId).FirstOrDefault().BgColor"
                                             FontColor="@Statuses.Where(x => x.Id == child.StatusId).FirstOrDefault().FontColor"
                                             Text="@Statuses.Where(x => x.Id == child.StatusId).FirstOrDefault().Name"
                                             Width="@StatusDispalyWidth"></SpanDisplay>
                            </div>
                        </div>
                    </div>
                    @if (ShowTags && childrenTags.ContainsKey(child.Id))
                    {
                        <div class="row">
                            <div class="col-lg-12">
                                <IndexTagList_Charge Tags="@childrenTags[child.Id]"></IndexTagList_Charge>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>



<style>
    .highlighted-index-@Charge.BatteryId-@Charge.Id:hover {
        outline: solid;
        outline-color: @Category.IconColor;
    }
    .bg-completed {
        background-color: #f2f2f2;
    }

</style>

@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public Category Category { get; set; }

    [Parameter]
    public Priority Priority { get; set; }

    [Parameter]
    public Status Status { get; set; }

    [Parameter]
    public Status CompleteStatus { get; set; }

    [Parameter]
    public bool ShowChildren { get; set; }

    [Parameter]
    public int PriorityDispalyWidth { get; set; }

    [Parameter]
    public int StatusDispalyWidth { get; set; }

    [Parameter]
    public List<Category> Categories { get; set; }

    [Parameter]
    public List<Priority> Priorities { get; set; }

    [Parameter]
    public List<Status> Statuses { get; set; }

    [Parameter]
    public bool ShowTags { get; set; }

    [Parameter]
    public string SearchText { get; set; }

    private List<Charge> children = new();
    private List<Tag> tags = new();

    private Dictionary<int, List<Tag>> childrenTags = new();

    protected override async Task OnInitializedAsync()
    {
        children = await _chargeService.GetChildren(Charge);
        tags = await _tagController.GetAllTagsForChargeAsync(Charge.Id);

        if (children.Any())
        {
            foreach (var child in children)
            {
                var childTags = await _tagController.GetAllTagsForChargeAsync(child.Id);

                if (childTags.Any())
                {
                    childrenTags.Add(child.Id, childTags);
                }
            }
        }
    }

    private void ToggleShowChildren()
    {
        ShowChildren = !ShowChildren;
        StateHasChanged();
    }
}
