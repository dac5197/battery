@inject IChargeService _chargeService
@inject ISearchUtil _search 
@inject ITagController _tagController

<div class="card bg-light shadow-sm my-2 pb-1 pt-2 px-2 border-square border-transparent highlighted-@Charge.BatteryId-@Charge.Id">
    <div class="cat-border-cli-@Charge.BatteryId-@Charge.Id pl-4 h-100">
        <div class="row mb-2">
            <div class="col">
                <a href="@($"/charge/{Charge.Id}")">
                    <h6 class="charge-detail">
                        <IconCategory Category="@category"></IconCategory>
                        @Charge.Id | @_search.HighlightSearchText(SearchText, Charge.Title)
                    </h6>
                </a>
                <hr class="mt-0 mb-2" />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <p class="small mb-1">Priority</p>
                <BtnDropDownPriorities Charge="@Charge" Priorities="@Priorities" ParentStateChanged="@ParentStateChanged"></BtnDropDownPriorities>
            </div>
            <div class="col">
                <p class="small mb-1">Status</p>
                <BtnDropDownStatuses Charge="@Charge" Statuses="@Statuses" ParentStateChanged="@ParentStateChanged"></BtnDropDownStatuses>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                @if (tags.Count() > 0)
                {
                    <p class="small mb-1">Tags (@tags.Count())</p>
                    @foreach (var tag in tags)
                    {
                        <TagListItem Charge="@Charge" Tag="@tag" IsReadonly="true"></TagListItem>
                    }
                }
            </div>
        </div>
        <div class="row mb-2">

            <div class="col">
                <p class="small mb-1">
                    Related Items
                    <BtnAddChargeChild @bind-Child="@boundChild"
                                       Charge="@Charge"></BtnAddChargeChild>
                </p>
                <BtnToggleChargeChildren Categories="@Categories"
                                         Children="@children"
                                         CompleteStatus="CompleteStatus"
                                         ToggleShowChildren="ToggleShowChildren"></BtnToggleChargeChildren>
            </div>
        </div>
        @if (ShowChildren)
        {
            <ul class="list-group list-group-flush mt-2">
                @foreach (var child in _search.GetChildren(Charge.Id))
                {
                    <ChargeDetail_RelatedListItem Charge="child" IsParent="false" ParentStateChanged="@ChargeCardStateChanged"></ChargeDetail_RelatedListItem>
                }
            </ul>
        }
    </div>
</div>

<style>
    

    .highlighted-@Charge.BatteryId-@Charge.Id:hover {
        outline: solid;
        outline-color: @category.IconColor;
    }

    

    .cat-border-cli-@Charge.BatteryId-@Charge.Id {
        box-shadow: 10px 0 @category.IconColor inset;
    }
</style>

@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public Status CompleteStatus { get; set; }

    [CascadingParameter(Name = "Categories")]
    private List<Category> Categories { get; set; }

    [CascadingParameter(Name = "Priorities")]
    private List<Priority> Priorities { get; set; }

    [CascadingParameter(Name = "Statuses")]
    private List<Status> Statuses { get; set; }

    [CascadingParameter(Name = "SearchText")]
    private string SearchText { get; set; }

    [CascadingParameter(Name = "ShowChildren")]
    private bool ShowChildren { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    [Parameter]
    public Charge Child { get; set; }

    [Parameter]
    public EventCallback<Charge> ChildChanged { get; set; }

    private Charge boundChild
    {
        get => Child;
        set
        {
            ChildChanged.InvokeAsync(value);
            ShowChildrenIfChargeIsParent();
        }
    }

    private Category category = new();
    private Priority priority = new();
    private Status status = new();

    private List<Charge> children = new();
    private List<Tag> tags = new();

    protected override async Task OnInitializedAsync()
    {
        children = await _chargeService.GetChildrenAsync(Charge);
        tags = await _tagController.GetAllTagsAsync(Charge.Id);

        category = Categories.Where(x => x.Id == Charge.CategoryId).FirstOrDefault();
        priority = Priorities.Where(x => x.Id == Charge.PriorityId).FirstOrDefault();
        status = Statuses.Where(x => x.Id == Charge.StatusId).FirstOrDefault();

        ShowChildrenIfChargeIsParent();
    }

    private void ShowChildrenIfChargeIsParent()
    {
        if (Child?.ParentId is not null)
        {
            ShowChildren = IsChargeParent();
        }
    }

    private bool IsChargeParent()
    {
        if (Child.ParentId == Charge.Id)
        {
            return true;
        }

        return false;
    }

    private void ToggleShowChildren()
    {
        ShowChildren = !ShowChildren;
        StateHasChanged();
    }

    private void ChargeCardStateChanged()
    {
        StateHasChanged();
    }
}
