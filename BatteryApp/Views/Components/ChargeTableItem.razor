@inject IConfiguration _configuration

@inject IChargeService _chargeService
@inject ITableSort_Charges _tableSort

<tr>
    <td class="text-center">
        <CategoryIcon Category="@Categories.Where(x => x.Id == Charge.CategoryId).FirstOrDefault()"></CategoryIcon>
    </td>
    <td>
        <a href="@($"/charge/{Charge.Id}")">

            <p class="charge-detail mb-0">
                @Charge.Id
            </p>
        </a>
    </td>
    <td>@Charge.Title</td>
    <td>
        <BtnDropDownPriorities Charge="@Charge"
                               Priorities="Priorities"
                               ParentStateChanged="@ParentStateChanged"></BtnDropDownPriorities>
    </td>
    <td>
        <BtnDropDownStatuses Charge="@Charge"
                             Statuses="@Statuses"
                             ParentStateChanged="@ParentStateChanged"></BtnDropDownStatuses>
    </td>
    @if (IsChild is false)
    {
        <td>
            <BtnToggleChargeChildren Categories="@Categories"
                                     Children="@children"
                                     CompleteStatus="@Statuses.OrderBy(x => x.Order).Last()"
                                     ToggleShowChildren="ToggleShowChildren"></BtnToggleChargeChildren>
            <BtnAddChargeChild @bind-Child="@boundChild"
                               Charge="@Charge"></BtnAddChargeChild>
        </td>
    }
    <td>@Charge.Created.ToLocalTime().ToString(dateTimeFormat)</td>
    <td>@Charge.Updated.ToLocalTime().ToString(dateTimeFormat)</td>
    <td>@Charge.Completed?.ToLocalTime().ToString(dateTimeFormat)</td>
</tr>

@if (ShowChildren)
{
    @if (Charge.ParentId is null)
    {
        <tr>
            <td colspan="8">
                <table class="table table-hover table-sm px-5">
                    <thead>
                        <tr>
                            <th>
                                <TableHeaderSort FieldNameOverride="Type" FieldName="Category" SortIcon="@(_tableSort.GetIcon("Category"))" SortMethod="SortTableByCategory"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldNameOverride="#" FieldName="Id" SortIcon="@(_tableSort.GetIcon("Id"))" SortMethod="SortTable"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Title" SortIcon="@(_tableSort.GetIcon("Title"))" SortMethod="SortTable"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Priority" SortIcon="@(_tableSort.GetIcon("Priority"))" SortMethod="SortTableByPriority"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Status" SortIcon="@(_tableSort.GetIcon("Status"))" SortMethod="SortTableByStatus"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Created" SortIcon="@(_tableSort.GetIcon("Created"))" SortMethod="SortTable"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Updated" SortIcon="@(_tableSort.GetIcon("Updated"))" SortMethod="SortTable"></TableHeaderSort>
                            </th>
                            <th>
                                <TableHeaderSort FieldName="Completed" SortIcon="@(_tableSort.GetIcon("Completed"))" SortMethod="SortTable"></TableHeaderSort>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var child in children.Where(x => x.Title.ToLower().Contains(SearchText.ToLower())).ToList())
                        {
                            <ChargeTableItem @key="@child"
                                             Charge="@child"
                                             IsChild="true"
                                             ParentStateChanged="StateChanged"></ChargeTableItem>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
    }


}


@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public bool IsChild { get; set; } = false;

    [Parameter]
    public Charge Child { get; set; }

    [Parameter]
    public EventCallback<Charge> ChildChanged { get; set; }

    private Charge boundChild
    {
        get => Child;
        set
        {
            ChildChanged.InvokeAsync(value);
            ShowChildrenIfChargeIsParent();
        }
    }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    [CascadingParameter(Name = "Categories")]
    private List<Category> Categories { get; set; }

    [CascadingParameter(Name = "Priorities")]
    private List<Priority> Priorities { get; set; }

    [CascadingParameter(Name = "Statuses")]
    private List<Status> Statuses { get; set; }

    [CascadingParameter(Name = "SearchText")]
    private string SearchText { get; set; }

    [CascadingParameter(Name = "ShowChildren")]
    private bool ShowChildren { get; set; }

    private string dateTimeFormat;

    private List<Charge> children = new();

    protected override async Task OnInitializedAsync()
    {
        children = await _chargeService.GetChildren(Charge);
        dateTimeFormat = _configuration["Configurations:DateTimeFormat"];

        ShowChildrenIfChargeIsParent();
    }

    private void ShowChildrenIfChargeIsParent()
    {
        if (Child?.ParentId is not null)
        {
            ShowChildren = IsChargeParent();
        }
    }

    private bool IsChargeParent()
    {
        if (Child.ParentId == Charge.Id)
        {
            return true;
        }

        return false;
    }

    private void ToggleShowChildren()
    {
        ShowChildren = !ShowChildren;
        StateHasChanged();
    }

    private async void StateChanged()
    {
        children = await _chargeService.GetChildren(Charge);
        await _chargeService.Get(Charge.Id);
        StateHasChanged();
    }

    private void SortTable(string colName)
    {
        children = _tableSort.Sort(colName, children);
        StateHasChanged();
    }

    private void SortTableByPriority(string colName)
    {
        children = _tableSort.Sort(colName, children, Priorities);
        StateHasChanged();
    }

    private void SortTableByStatus(string colName)
    {
        children = _tableSort.Sort(colName, children, null, Statuses);
        StateHasChanged();
    }

    private void SortTableByCategory(string colName)
    {
        children = _tableSort.Sort(colName, children, null, null, null, Categories);
        StateHasChanged();
    }
}
