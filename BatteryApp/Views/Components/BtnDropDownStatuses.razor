@inject IChargeChildController _chargeChildController
@inject IChargeOpenChildrenModalHelper _chargeOpenChildrenModalHelper
@inject IChargeService _chargeService
@inject IStatusService _statusService
@inject IJSRuntime _jsRuntime

<button id="statusCharge-@Charge.Id" type="button" class="btn btn-sm border-square dopdown-toggle mx-1 py-0 px-1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
        style="color: @status.FontColor; background-color: @status.BgColor">
    @status.Name
</button>
<div class="dropdown-menu" aria-labelledby="statusCharge-@Charge.Id">
    @foreach (var s in Statuses.OrderBy(x => x.Order))
    {
        @if (s.Id == Charge.StatusId)
        {
            <a class="dropdown-item small bg-info"> @s.Name</a>
        }
        else
        {
            <a class="dropdown-item small" href="" @onclick="@(() => ChangeChargeStatus(s.Id))" @onclick:preventDefault="true"> @s.Name</a>
        }
    }
</div>

@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public List<Status> Statuses { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private Status status = new();
    private Status completeStatus = new();

    protected override async Task OnInitializedAsync()
    {
        completeStatus = await _statusService.GetCompletedStatus(Charge.BatteryId);

        status = Statuses.Where(x => x.Id == Charge.StatusId).FirstOrDefault();
    }

    private async void ChangeChargeStatus(int statusId)
    {
        await _chargeOpenChildrenModalHelper.SetChargeAndOpenChildren(Charge);

        if (_chargeOpenChildrenModalHelper.HasChildren && statusId == completeStatus.Id)
        {
            ParentStateChanged?.Invoke();
            await _jsRuntime.InvokeAsync<object>("ShowModal", "chargeChildrenWarningModal");
            return;
        }

        Charge.StatusId = statusId;
        await _chargeService.Update(Charge);
        ParentStateChanged?.Invoke();
    }
}
