@inject ISearchUtil _search

<div class="card bg-light border-square px-2">
    <div class="row">
        <div class="col">
            <IconTags />
            @foreach (var tag in Tags.OrderBy(x => x.Name))
            {
                <span style="cursor: pointer"
                      class="@(tag.Id == _search.GetTag().Id ? "searched-tag" : "")"
                      @onclick="@(() => FilterChargesByTag.InvokeAsync(tag))">
                    <TagIndexItem Tag="@tag"
                                  Count="@(TagCounts.ContainsKey(tag.Id) ? TagCounts[tag.Id] : 0)"
                                  ShowTagCounts="@true"></TagIndexItem>
                </span>

            }
            <button class="btn btn-sm bg-transparent border-square "
                    type="button"
                    title="Manage Tags"
                    data-toggle="modal"
                    data-target="#ManageTagsModal"
                    @onclick="@(() => SetManageTagsBattery.InvokeAsync(Tags.FirstOrDefault().BatteryId))">
                <span class="oi oi-ellipses"></span>
            </button>
        </div>
    </div>
</div>

<style>
    .searched-tag {
        outline: #ff0000;
        outline-style: solid;
    }
</style>

@code {
    [Parameter]
    public List<Tag> Tags { get; set; }

    [Parameter]
    public Dictionary<int, int> TagCounts { get; set; }

    [Parameter]
    public EventCallback<int> SetManageTagsBattery { get; set; }

    [Parameter]
    public EventCallback<Tag> FilterChargesByTag { get; set; }
}
