@inject IChargeService _chargeService

<div class="card bg-light shadow-sm my-2 pb-1 pt-2 px-2 border-square border-transparent highlighted-@Charge.BatteryId-@Charge.Id">
    <div class="cat-border-cli-@Charge.BatteryId-@Charge.Id pl-4 h-100">
        <div class="row">
            <div class="col">
                <a href="@($"/charge/{Charge.Id}")">
                    <p class="charge-detail">
                        <span class="oi @category.Icon" style="color: @category.IconColor"></span>
                        @Charge.Title @Charge.Status
                    </p>
                </a>
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <p>TAGS Placeholder</p>
            </div>
        </div>
        <div class="row">
            <div class="col">
                @foreach (var cat in Categories)
                {
                    @if (children.Where(x => x.CategoryId == cat.Id).Count() > 0)
                    {
                        <button type="button" class="btn btn-sm border-square mx-1 py-0 px-1" style="background-color: @cat.IconColor" @onclick="@ToggleShowChildren">
                            <span class="oi @cat.Icon" style="color: white"></span>
                            <span class="badge badge-light border-square">@children.Where(x => x.StatusId == CompleteStatus.Id && x.CategoryId == cat.Id).Count()/@children.Where(x => x.CategoryId == cat.Id).Count()</span>
                            <span class="sr-only">@cat.Name Count</span>
                        </button>
                    }
                }
            </div>
        </div>
        @if (showChildren)
        {
            <ul class="list-group list-group-flush mt-2">
                @foreach (var child in children)
                {
                    <ChargeDetail_RelatedListItem Charge="child" IsParent="false"></ChargeDetail_RelatedListItem>
                }
            </ul>
        }

    </div>
</div>

<style>
    

    .highlighted-@Charge.BatteryId-@Charge.Id:hover {
        outline: solid;
        outline-color: @category.IconColor;
    }

    .charge-detail {
        color: black;
    }

    .charge-detail:hover {
        text-decoration: underline;
    }

    .cat-border-cli-@Charge.BatteryId-@Charge.Id {
        box-shadow: 10px 0 @category.IconColor inset;
    }
</style>

@code {
    [Parameter]
    public List<Category> Categories { get; set; }

    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public Status CompleteStatus { get; set; }

    [Parameter]
    public EventCallback<Charge> SetChargeItem { get; set; }

    private Category category = new();

    private List<Charge> children = new();

    private bool showChildren = false;
    private string highlightedCssClass;

    protected override async Task OnInitializedAsync()
    {
        children = await _chargeService.GetChildren(Charge);

        category = Categories.Where(x => x.Id == Charge.CategoryId).FirstOrDefault();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        highlightedCssClass = "";
        base.OnAfterRender(firstRender);
    }

    private void SetHighlightedCssClass()
    {
        highlightedCssClass = $"highlighted-{Charge.BatteryId}-{Charge.Id}";
    }

    private void ClearHighlightedCssClass()
    {
        highlightedCssClass = "";
    }

    private async Task OnSetChargeItem()
    {
        await SetChargeItem.InvokeAsync(Charge);
    }

    private void ToggleShowChildren()
    {
        showChildren = !showChildren;
    }
}
