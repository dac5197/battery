@inject IChargeService _chargeService
@inject ITableSort_Charges _tableSort

<div class="row mb-3">
    <div class="col">
        <div class="card border-square shadow-sm px-2 pt-2 pb-0 h-100">
            <table class="table table-hover table-sm">
                <thead>
                    <tr>
                        <th>
                            <TableHeaderSort FieldNameOverride="Type" FieldName="Category" SortIcon="@(_tableSort.GetIcon("Category"))" SortMethod="SortTableByCategory"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldNameOverride="#" FieldName="Id" SortIcon="@(_tableSort.GetIcon("Id"))" SortMethod="SortTable"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Title" SortIcon="@(_tableSort.GetIcon("Title"))" SortMethod="SortTable"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Priority" SortIcon="@(_tableSort.GetIcon("Priority"))" SortMethod="SortTableByPriority"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Status" SortIcon="@(_tableSort.GetIcon("Status"))" SortMethod="SortTableByStatus"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Children" SortIcon="@(_tableSort.GetIcon("Children"))" SortMethod="SortTableByChildrenCount"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Created" SortIcon="@(_tableSort.GetIcon("Created"))" SortMethod="SortTable"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Updated" SortIcon="@(_tableSort.GetIcon("Updated"))" SortMethod="SortTable"></TableHeaderSort>
                        </th>
                        <th>
                            <TableHeaderSort FieldName="Completed" SortIcon="@(_tableSort.GetIcon("Completed"))" SortMethod="SortTable"></TableHeaderSort>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var charge in Charges.Where(x => x.ParentId is null))
                    {
                        <ChargeTableItem @key="@charge"
                                         @bind-Child="@boundChild"
                                         Charge="@charge"
                                         ParentStateChanged="@ParentStateChanged"></ChargeTableItem>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Charge> Charges { get; set; }

    [Parameter]
    public Charge Child { get; set; }

    [Parameter]
    public EventCallback<Charge> ChildChanged { get; set; }

    private Charge boundChild
    {
        get => Child;
        set => ChildChanged.InvokeAsync(value);
    }

    [Parameter]
    public List<ChargeChildrenCount> ChargeChildrenCounts { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    [CascadingParameter(Name = "Categories")]
    private List<Category> Categories { get; set; }

    [CascadingParameter(Name = "Priorities")]
    private List<Priority> Priorities { get; set; }

    [CascadingParameter(Name = "Statuses")]
    private List<Status> Statuses { get; set; }

    [CascadingParameter(Name = "SearchText")]
    private string SearchText { get; set; }

    [CascadingParameter(Name = "ShowChildren")]
    private bool ShowChildren { get; set; }

    private void SortTable(string colName)
    {
        Charges = _tableSort.Sort(colName, Charges);
        StateHasChanged();
    }

    private void SortTableByPriority(string colName)
    {
        Charges = _tableSort.Sort(colName, Charges, Priorities);
        StateHasChanged();
    }

    private void SortTableByStatus(string colName)
    {
        Charges = _tableSort.Sort(colName, Charges, null, Statuses);
        StateHasChanged();
    }

    private void SortTableByChildrenCount(string colName)
    {
        Charges = _tableSort.Sort(colName, Charges, null, null, ChargeChildrenCounts);
        StateHasChanged();
    }

    private void SortTableByCategory(string colName)
    {
        Charges = _tableSort.Sort(colName, Charges, null, null, null, Categories);
        StateHasChanged();
    }

    //protected override void OnInitialized()
    //{
    //    _tableSort.OnChange += StateHasChanged;
    //}

    //public void Dispose()
    //{
    //    _tableSort.OnChange -= StateHasChanged;
    //}
}
