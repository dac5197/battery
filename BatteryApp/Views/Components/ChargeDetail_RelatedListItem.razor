@inject NavigationManager _navManager

@inject ICategoryService _categoryService
@inject IChargeChildController _chargeChildController
@inject IChargeLifecycle _chargeLifecycle
@inject IChargeService _chargeService
@inject ISearchUtil _search
@inject ITagController _tagController


<li class="list-group-item border-0 px-4">
    @if (IsParent is false)
    {
        <input @onchange="@(() => SetStatus())" type="checkbox" checked="@isCompleted" class="form-check-input" />
    }
<a href="@($"/charge/{Charge.Id}")" class="link-black" @onclick="HandleClick">
    <div class="d-inline">
        <IconCategory Category="@category"></IconCategory>
    </div>
    <div class="@(isCompleted ? "completed" : "") d-inline">
        @Charge.Id | @_search.HighlightSearchText(SearchText, Charge.Title)
    </div>
</a>
    @if (tags.Any())
    {
        @foreach (var tag in tags)
        {
            <TagListItem Charge="@Charge" Tag="@tag" IsReadonly="true"></TagListItem>
        }
    }
</li>

<style>
    .cat-child-icon-@Charge.Id {
        color: @category.IconColor;
    }

</style>

@code {
    [CascadingParameter(Name = "SearchText")]
    private string SearchText { get; set; }

    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public bool IsParent { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private Category category = new();

    private List<Tag> tags = new();

    private bool isCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        isCompleted = _chargeLifecycle.IsCompleted(Charge);
        category = await _categoryService.Get(Charge.CategoryId);
        tags = await _tagController.GetAllTagsAsync(Charge.Id);
    }

    private void HandleClick()
    {
        _navManager.NavigateTo($"/charge/{Charge.Id}", true);
    }

    private async void SetStatus()
    {
        isCompleted = !isCompleted;
        await _chargeChildController.ToggleCompletedStatusAsync(Charge, isCompleted);
        ParentStateChanged?.Invoke();
        //StateHasChanged();
    }
}
