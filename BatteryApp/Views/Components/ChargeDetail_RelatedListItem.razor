@inject NavigationManager _navManager

@inject ICategoryService _categoryService
@inject IChargeChildController _chargeChildController
@inject IChargeLifecycle _chargeLifecycle
@inject IChargeService _chargeService

<li class="list-group-item border-0">
    @if (IsParent is false)
    {
        <input @onchange="@(() => SetStatus())" type="checkbox" checked="@isCompleted" class="form-check-input" />
    }
    <a href="@($"/charge/{Charge.Id}")" class="link-black" @onclick="HandleClick">
        <div class="d-inline">
            <span class="oi @category.Icon cat-child-icon-@Charge.Id"></span>
        </div>
        @if (isCompleted)
        {
            <div class="completed d-inline">
                @Charge.Id | @Charge.Title
            </div>
        }
        else
        {
            <div class="d-inline">@Charge.Id | @Charge.Title</div>
        }
    </a>
</li>

<style>
    .cat-child-icon-@Charge.Id {
        color: @category.IconColor;
    }
    
</style>

@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public bool IsParent { get; set; }

    private Category category = new();

    private bool isCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        isCompleted = _chargeLifecycle.IsCompleted(Charge);
        category = await _categoryService.Get(Charge.CategoryId);
    }

    private void HandleClick()
    {
        _navManager.NavigateTo($"/charge/{Charge.Id}", true);
    }

    private async void SetStatus()
    {
        isCompleted = !isCompleted;
        await _chargeChildController.ToggleCompletedStatusAsync(Charge, isCompleted);
        StateHasChanged();
    }
}
