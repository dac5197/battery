@inject IChargeService _chargeService

<button id="priorityCharge-@Charge.Id" type="button" class="btn btn-sm border-square dopdown-toggle small mx-1 py-0 px-1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
        style="color: @priority.FontColor; background-color: @priority.BgColor">
    @priority.DisplayName
</button>
<div class="dropdown-menu" aria-labelledby="priorityCharge-@Charge.Id">
    @foreach (var p in Priorities.OrderBy(x => x.Severity))
    {
        @if (p.Id == Charge.PriorityId)
        {
            <a class="dropdown-item small bg-info"> @p.DisplayName</a>
        }
        else
        {
            <a class="dropdown-item small" href="" @onclick="@(() => ChangeChargePriorityAsync(p.Id))" @onclick:preventDefault="true"> @p.DisplayName</a>
        }
    }
</div>

@code {
    [Parameter]
    public Charge Charge { get; set; }

    [Parameter]
    public List<Priority> Priorities { get; set; }

    [Parameter]
    public Action ParentStateChanged { get; set; }

    private Priority priority = new();

    protected override void OnInitialized()
    {
        priority = Priorities.Where(x => x.Id == Charge.PriorityId).FirstOrDefault();
        base.OnInitialized();
    }

    private async void ChangeChargePriorityAsync(int priorityId)
    {
        Charge.PriorityId = priorityId;
        await _chargeService.UpdateAsync(Charge);
        priority = Priorities.Where(x => x.Id == priorityId).FirstOrDefault();
        ParentStateChanged?.Invoke();
    }
}
